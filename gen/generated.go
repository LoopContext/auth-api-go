// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Permission() PermissionResolver
	PermissionResultType() PermissionResultTypeResolver
	Profile() ProfileResolver
	ProfileResultType() ProfileResultTypeResolver
	Query() QueryResolver
	Role() RoleResolver
	RoleResultType() RoleResultTypeResolver
	User() UserResolver
	UserAPIKey() UserAPIKeyResolver
	UserAPIKeyResultType() UserAPIKeyResultTypeResolver
	UserResultType() UserResultTypeResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		CreatePermission     func(childComplexity int, input map[string]interface{}) int
		CreateProfile        func(childComplexity int, input map[string]interface{}) int
		CreateRole           func(childComplexity int, input map[string]interface{}) int
		CreateUser           func(childComplexity int, input map[string]interface{}) int
		CreateUserAPIKey     func(childComplexity int, input map[string]interface{}) int
		DeleteAllPermissions func(childComplexity int) int
		DeleteAllProfiles    func(childComplexity int) int
		DeleteAllRoles       func(childComplexity int) int
		DeleteAllUserAPIKeys func(childComplexity int) int
		DeleteAllUsers       func(childComplexity int) int
		DeletePermission     func(childComplexity int, id string) int
		DeleteProfile        func(childComplexity int, id string) int
		DeleteRole           func(childComplexity int, id string) int
		DeleteUser           func(childComplexity int, id string) int
		DeleteUserAPIKey     func(childComplexity int, id string) int
		UpdatePermission     func(childComplexity int, id string, input map[string]interface{}) int
		UpdateProfile        func(childComplexity int, id string, input map[string]interface{}) int
		UpdateRole           func(childComplexity int, id string, input map[string]interface{}) int
		UpdateUser           func(childComplexity int, id string, input map[string]interface{}) int
		UpdateUserAPIKey     func(childComplexity int, id string, input map[string]interface{}) int
	}

	Permission struct {
		Apikeys           func(childComplexity int) int
		ApikeysConnection func(childComplexity int, offset *int, limit *int, q *string, sort []*UserAPIKeySortType, filter *UserAPIKeyFilterType) int
		ApikeysIds        func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Description       func(childComplexity int) int
		Domain            func(childComplexity int) int
		ID                func(childComplexity int) int
		Roles             func(childComplexity int) int
		RolesConnection   func(childComplexity int, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) int
		RolesIds          func(childComplexity int) int
		Tag               func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		Users             func(childComplexity int) int
		UsersConnection   func(childComplexity int, offset *int, limit *int, q *string, sort []*UserSortType, filter *UserFilterType) int
		UsersIds          func(childComplexity int) int
	}

	PermissionResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	Profile struct {
		AvatarURL       func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		Description     func(childComplexity int) int
		Email           func(childComplexity int) int
		ExternalUserID  func(childComplexity int) int
		FirstName       func(childComplexity int) int
		ID              func(childComplexity int) int
		LastName        func(childComplexity int) int
		Location        func(childComplexity int) int
		Name            func(childComplexity int) int
		NickName        func(childComplexity int) int
		Provider        func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		Users           func(childComplexity int) int
		UsersConnection func(childComplexity int, offset *int, limit *int, q *string, sort []*UserSortType, filter *UserFilterType) int
		UsersIds        func(childComplexity int) int
	}

	ProfileResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	Query struct {
		Permission         func(childComplexity int, id *string, q *string, filter *PermissionFilterType) int
		Permissions        func(childComplexity int, offset *int, limit *int, q *string, sort []*PermissionSortType, filter *PermissionFilterType) int
		Profile            func(childComplexity int, id *string, q *string, filter *ProfileFilterType) int
		Profiles           func(childComplexity int, offset *int, limit *int, q *string, sort []*ProfileSortType, filter *ProfileFilterType) int
		Role               func(childComplexity int, id *string, q *string, filter *RoleFilterType) int
		Roles              func(childComplexity int, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) int
		User               func(childComplexity int, id *string, q *string, filter *UserFilterType) int
		UserAPIKey         func(childComplexity int, id *string, q *string, filter *UserAPIKeyFilterType) int
		UserAPIKeys        func(childComplexity int, offset *int, limit *int, q *string, sort []*UserAPIKeySortType, filter *UserAPIKeyFilterType) int
		Users              func(childComplexity int, offset *int, limit *int, q *string, sort []*UserSortType, filter *UserFilterType) int
		__resolve__service func(childComplexity int) int
	}

	Role struct {
		Children              func(childComplexity int) int
		ChildrenConnection    func(childComplexity int, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) int
		ChildrenIds           func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		Description           func(childComplexity int) int
		Domain                func(childComplexity int) int
		ID                    func(childComplexity int) int
		Name                  func(childComplexity int) int
		Parents               func(childComplexity int) int
		ParentsConnection     func(childComplexity int, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) int
		ParentsIds            func(childComplexity int) int
		Permissions           func(childComplexity int) int
		PermissionsConnection func(childComplexity int, offset *int, limit *int, q *string, sort []*PermissionSortType, filter *PermissionFilterType) int
		PermissionsIds        func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		Users                 func(childComplexity int) int
		UsersConnection       func(childComplexity int, offset *int, limit *int, q *string, sort []*UserSortType, filter *UserFilterType) int
		UsersIds              func(childComplexity int) int
	}

	RoleResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	User struct {
		Active                func(childComplexity int) int
		Apikeys               func(childComplexity int) int
		ApikeysConnection     func(childComplexity int, offset *int, limit *int, q *string, sort []*UserAPIKeySortType, filter *UserAPIKeyFilterType) int
		ApikeysIds            func(childComplexity int) int
		AvatarURL             func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		Description           func(childComplexity int) int
		DisplayName           func(childComplexity int) int
		Email                 func(childComplexity int) int
		FirstName             func(childComplexity int) int
		ID                    func(childComplexity int) int
		LastName              func(childComplexity int) int
		Location              func(childComplexity int) int
		NickName              func(childComplexity int) int
		Password              func(childComplexity int) int
		Permissions           func(childComplexity int) int
		PermissionsConnection func(childComplexity int, offset *int, limit *int, q *string, sort []*PermissionSortType, filter *PermissionFilterType) int
		PermissionsIds        func(childComplexity int) int
		Profiles              func(childComplexity int) int
		ProfilesConnection    func(childComplexity int, offset *int, limit *int, q *string, sort []*ProfileSortType, filter *ProfileFilterType) int
		ProfilesIds           func(childComplexity int) int
		Roles                 func(childComplexity int) int
		RolesConnection       func(childComplexity int, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) int
		RolesIds              func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
	}

	UserAPIKey struct {
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		Description           func(childComplexity int) int
		ID                    func(childComplexity int) int
		Key                   func(childComplexity int) int
		Permissions           func(childComplexity int) int
		PermissionsConnection func(childComplexity int, offset *int, limit *int, q *string, sort []*PermissionSortType, filter *PermissionFilterType) int
		PermissionsIds        func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		UpdatedBy             func(childComplexity int) int
		User                  func(childComplexity int) int
		UserID                func(childComplexity int) int
	}

	UserAPIKeyResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	UserResultType struct {
		Count func(childComplexity int) int
		Items func(childComplexity int) int
	}

	Service struct {
		SDL func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateUser(ctx context.Context, input map[string]interface{}) (*User, error)
	UpdateUser(ctx context.Context, id string, input map[string]interface{}) (*User, error)
	DeleteUser(ctx context.Context, id string) (*User, error)
	DeleteAllUsers(ctx context.Context) (bool, error)
	CreateUserAPIKey(ctx context.Context, input map[string]interface{}) (*UserAPIKey, error)
	UpdateUserAPIKey(ctx context.Context, id string, input map[string]interface{}) (*UserAPIKey, error)
	DeleteUserAPIKey(ctx context.Context, id string) (*UserAPIKey, error)
	DeleteAllUserAPIKeys(ctx context.Context) (bool, error)
	CreateProfile(ctx context.Context, input map[string]interface{}) (*Profile, error)
	UpdateProfile(ctx context.Context, id string, input map[string]interface{}) (*Profile, error)
	DeleteProfile(ctx context.Context, id string) (*Profile, error)
	DeleteAllProfiles(ctx context.Context) (bool, error)
	CreateRole(ctx context.Context, input map[string]interface{}) (*Role, error)
	UpdateRole(ctx context.Context, id string, input map[string]interface{}) (*Role, error)
	DeleteRole(ctx context.Context, id string) (*Role, error)
	DeleteAllRoles(ctx context.Context) (bool, error)
	CreatePermission(ctx context.Context, input map[string]interface{}) (*Permission, error)
	UpdatePermission(ctx context.Context, id string, input map[string]interface{}) (*Permission, error)
	DeletePermission(ctx context.Context, id string) (*Permission, error)
	DeleteAllPermissions(ctx context.Context) (bool, error)
}
type PermissionResolver interface {
	Users(ctx context.Context, obj *Permission) ([]*User, error)
	Roles(ctx context.Context, obj *Permission) ([]*Role, error)
	Apikeys(ctx context.Context, obj *Permission) ([]*UserAPIKey, error)

	UsersIds(ctx context.Context, obj *Permission) ([]string, error)
	UsersConnection(ctx context.Context, obj *Permission, offset *int, limit *int, q *string, sort []*UserSortType, filter *UserFilterType) (*UserResultType, error)
	RolesIds(ctx context.Context, obj *Permission) ([]string, error)
	RolesConnection(ctx context.Context, obj *Permission, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) (*RoleResultType, error)
	ApikeysIds(ctx context.Context, obj *Permission) ([]string, error)
	ApikeysConnection(ctx context.Context, obj *Permission, offset *int, limit *int, q *string, sort []*UserAPIKeySortType, filter *UserAPIKeyFilterType) (*UserAPIKeyResultType, error)
}
type PermissionResultTypeResolver interface {
	Items(ctx context.Context, obj *PermissionResultType) ([]*Permission, error)
	Count(ctx context.Context, obj *PermissionResultType) (int, error)
}
type ProfileResolver interface {
	Users(ctx context.Context, obj *Profile) ([]*User, error)

	UsersIds(ctx context.Context, obj *Profile) ([]string, error)
	UsersConnection(ctx context.Context, obj *Profile, offset *int, limit *int, q *string, sort []*UserSortType, filter *UserFilterType) (*UserResultType, error)
}
type ProfileResultTypeResolver interface {
	Items(ctx context.Context, obj *ProfileResultType) ([]*Profile, error)
	Count(ctx context.Context, obj *ProfileResultType) (int, error)
}
type QueryResolver interface {
	User(ctx context.Context, id *string, q *string, filter *UserFilterType) (*User, error)
	Users(ctx context.Context, offset *int, limit *int, q *string, sort []*UserSortType, filter *UserFilterType) (*UserResultType, error)
	UserAPIKey(ctx context.Context, id *string, q *string, filter *UserAPIKeyFilterType) (*UserAPIKey, error)
	UserAPIKeys(ctx context.Context, offset *int, limit *int, q *string, sort []*UserAPIKeySortType, filter *UserAPIKeyFilterType) (*UserAPIKeyResultType, error)
	Profile(ctx context.Context, id *string, q *string, filter *ProfileFilterType) (*Profile, error)
	Profiles(ctx context.Context, offset *int, limit *int, q *string, sort []*ProfileSortType, filter *ProfileFilterType) (*ProfileResultType, error)
	Role(ctx context.Context, id *string, q *string, filter *RoleFilterType) (*Role, error)
	Roles(ctx context.Context, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) (*RoleResultType, error)
	Permission(ctx context.Context, id *string, q *string, filter *PermissionFilterType) (*Permission, error)
	Permissions(ctx context.Context, offset *int, limit *int, q *string, sort []*PermissionSortType, filter *PermissionFilterType) (*PermissionResultType, error)
}
type RoleResolver interface {
	Users(ctx context.Context, obj *Role) ([]*User, error)
	Parents(ctx context.Context, obj *Role) ([]*Role, error)
	Children(ctx context.Context, obj *Role) ([]*Role, error)
	Permissions(ctx context.Context, obj *Role) ([]*Permission, error)

	UsersIds(ctx context.Context, obj *Role) ([]string, error)
	UsersConnection(ctx context.Context, obj *Role, offset *int, limit *int, q *string, sort []*UserSortType, filter *UserFilterType) (*UserResultType, error)
	ParentsIds(ctx context.Context, obj *Role) ([]string, error)
	ParentsConnection(ctx context.Context, obj *Role, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) (*RoleResultType, error)
	ChildrenIds(ctx context.Context, obj *Role) ([]string, error)
	ChildrenConnection(ctx context.Context, obj *Role, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) (*RoleResultType, error)
	PermissionsIds(ctx context.Context, obj *Role) ([]string, error)
	PermissionsConnection(ctx context.Context, obj *Role, offset *int, limit *int, q *string, sort []*PermissionSortType, filter *PermissionFilterType) (*PermissionResultType, error)
}
type RoleResultTypeResolver interface {
	Items(ctx context.Context, obj *RoleResultType) ([]*Role, error)
	Count(ctx context.Context, obj *RoleResultType) (int, error)
}
type UserResolver interface {
	Apikeys(ctx context.Context, obj *User) ([]*UserAPIKey, error)
	Roles(ctx context.Context, obj *User) ([]*Role, error)
	Profiles(ctx context.Context, obj *User) ([]*Profile, error)
	Permissions(ctx context.Context, obj *User) ([]*Permission, error)

	ApikeysIds(ctx context.Context, obj *User) ([]string, error)
	ApikeysConnection(ctx context.Context, obj *User, offset *int, limit *int, q *string, sort []*UserAPIKeySortType, filter *UserAPIKeyFilterType) (*UserAPIKeyResultType, error)
	RolesIds(ctx context.Context, obj *User) ([]string, error)
	RolesConnection(ctx context.Context, obj *User, offset *int, limit *int, q *string, sort []*RoleSortType, filter *RoleFilterType) (*RoleResultType, error)
	ProfilesIds(ctx context.Context, obj *User) ([]string, error)
	ProfilesConnection(ctx context.Context, obj *User, offset *int, limit *int, q *string, sort []*ProfileSortType, filter *ProfileFilterType) (*ProfileResultType, error)
	PermissionsIds(ctx context.Context, obj *User) ([]string, error)
	PermissionsConnection(ctx context.Context, obj *User, offset *int, limit *int, q *string, sort []*PermissionSortType, filter *PermissionFilterType) (*PermissionResultType, error)
}
type UserAPIKeyResolver interface {
	User(ctx context.Context, obj *UserAPIKey) (*User, error)
	Permissions(ctx context.Context, obj *UserAPIKey) ([]*Permission, error)

	PermissionsIds(ctx context.Context, obj *UserAPIKey) ([]string, error)
	PermissionsConnection(ctx context.Context, obj *UserAPIKey, offset *int, limit *int, q *string, sort []*PermissionSortType, filter *PermissionFilterType) (*PermissionResultType, error)
}
type UserAPIKeyResultTypeResolver interface {
	Items(ctx context.Context, obj *UserAPIKeyResultType) ([]*UserAPIKey, error)
	Count(ctx context.Context, obj *UserAPIKeyResultType) (int, error)
}
type UserResultTypeResolver interface {
	Items(ctx context.Context, obj *UserResultType) ([]*User, error)
	Count(ctx context.Context, obj *UserResultType) (int, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.createPermission":
		if e.complexity.Mutation.CreatePermission == nil {
			break
		}

		args, err := ec.field_Mutation_createPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePermission(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createProfile":
		if e.complexity.Mutation.CreateProfile == nil {
			break
		}

		args, err := ec.field_Mutation_createProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProfile(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createRole":
		if e.complexity.Mutation.CreateRole == nil {
			break
		}

		args, err := ec.field_Mutation_createRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRole(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.createUserAPIKey":
		if e.complexity.Mutation.CreateUserAPIKey == nil {
			break
		}

		args, err := ec.field_Mutation_createUserAPIKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserAPIKey(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.deleteAllPermissions":
		if e.complexity.Mutation.DeleteAllPermissions == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllPermissions(childComplexity), true

	case "Mutation.deleteAllProfiles":
		if e.complexity.Mutation.DeleteAllProfiles == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllProfiles(childComplexity), true

	case "Mutation.deleteAllRoles":
		if e.complexity.Mutation.DeleteAllRoles == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllRoles(childComplexity), true

	case "Mutation.deleteAllUserAPIKeys":
		if e.complexity.Mutation.DeleteAllUserAPIKeys == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllUserAPIKeys(childComplexity), true

	case "Mutation.deleteAllUsers":
		if e.complexity.Mutation.DeleteAllUsers == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllUsers(childComplexity), true

	case "Mutation.deletePermission":
		if e.complexity.Mutation.DeletePermission == nil {
			break
		}

		args, err := ec.field_Mutation_deletePermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePermission(childComplexity, args["id"].(string)), true

	case "Mutation.deleteProfile":
		if e.complexity.Mutation.DeleteProfile == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProfile(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRole":
		if e.complexity.Mutation.DeleteRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRole(childComplexity, args["id"].(string)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(string)), true

	case "Mutation.deleteUserAPIKey":
		if e.complexity.Mutation.DeleteUserAPIKey == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserAPIKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserAPIKey(childComplexity, args["id"].(string)), true

	case "Mutation.updatePermission":
		if e.complexity.Mutation.UpdatePermission == nil {
			break
		}

		args, err := ec.field_Mutation_updatePermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePermission(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateProfile":
		if e.complexity.Mutation.UpdateProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updateProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProfile(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateRole":
		if e.complexity.Mutation.UpdateRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRole(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Mutation.updateUserAPIKey":
		if e.complexity.Mutation.UpdateUserAPIKey == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserAPIKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserAPIKey(childComplexity, args["id"].(string), args["input"].(map[string]interface{})), true

	case "Permission.apikeys":
		if e.complexity.Permission.Apikeys == nil {
			break
		}

		return e.complexity.Permission.Apikeys(childComplexity), true

	case "Permission.apikeysConnection":
		if e.complexity.Permission.ApikeysConnection == nil {
			break
		}

		args, err := ec.field_Permission_apikeysConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Permission.ApikeysConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserAPIKeySortType), args["filter"].(*UserAPIKeyFilterType)), true

	case "Permission.apikeysIds":
		if e.complexity.Permission.ApikeysIds == nil {
			break
		}

		return e.complexity.Permission.ApikeysIds(childComplexity), true

	case "Permission.createdAt":
		if e.complexity.Permission.CreatedAt == nil {
			break
		}

		return e.complexity.Permission.CreatedAt(childComplexity), true

	case "Permission.createdBy":
		if e.complexity.Permission.CreatedBy == nil {
			break
		}

		return e.complexity.Permission.CreatedBy(childComplexity), true

	case "Permission.description":
		if e.complexity.Permission.Description == nil {
			break
		}

		return e.complexity.Permission.Description(childComplexity), true

	case "Permission.domain":
		if e.complexity.Permission.Domain == nil {
			break
		}

		return e.complexity.Permission.Domain(childComplexity), true

	case "Permission.id":
		if e.complexity.Permission.ID == nil {
			break
		}

		return e.complexity.Permission.ID(childComplexity), true

	case "Permission.roles":
		if e.complexity.Permission.Roles == nil {
			break
		}

		return e.complexity.Permission.Roles(childComplexity), true

	case "Permission.rolesConnection":
		if e.complexity.Permission.RolesConnection == nil {
			break
		}

		args, err := ec.field_Permission_rolesConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Permission.RolesConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType)), true

	case "Permission.rolesIds":
		if e.complexity.Permission.RolesIds == nil {
			break
		}

		return e.complexity.Permission.RolesIds(childComplexity), true

	case "Permission.tag":
		if e.complexity.Permission.Tag == nil {
			break
		}

		return e.complexity.Permission.Tag(childComplexity), true

	case "Permission.updatedAt":
		if e.complexity.Permission.UpdatedAt == nil {
			break
		}

		return e.complexity.Permission.UpdatedAt(childComplexity), true

	case "Permission.updatedBy":
		if e.complexity.Permission.UpdatedBy == nil {
			break
		}

		return e.complexity.Permission.UpdatedBy(childComplexity), true

	case "Permission.users":
		if e.complexity.Permission.Users == nil {
			break
		}

		return e.complexity.Permission.Users(childComplexity), true

	case "Permission.usersConnection":
		if e.complexity.Permission.UsersConnection == nil {
			break
		}

		args, err := ec.field_Permission_usersConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Permission.UsersConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserSortType), args["filter"].(*UserFilterType)), true

	case "Permission.usersIds":
		if e.complexity.Permission.UsersIds == nil {
			break
		}

		return e.complexity.Permission.UsersIds(childComplexity), true

	case "PermissionResultType.count":
		if e.complexity.PermissionResultType.Count == nil {
			break
		}

		return e.complexity.PermissionResultType.Count(childComplexity), true

	case "PermissionResultType.items":
		if e.complexity.PermissionResultType.Items == nil {
			break
		}

		return e.complexity.PermissionResultType.Items(childComplexity), true

	case "Profile.avatarURL":
		if e.complexity.Profile.AvatarURL == nil {
			break
		}

		return e.complexity.Profile.AvatarURL(childComplexity), true

	case "Profile.createdAt":
		if e.complexity.Profile.CreatedAt == nil {
			break
		}

		return e.complexity.Profile.CreatedAt(childComplexity), true

	case "Profile.createdBy":
		if e.complexity.Profile.CreatedBy == nil {
			break
		}

		return e.complexity.Profile.CreatedBy(childComplexity), true

	case "Profile.description":
		if e.complexity.Profile.Description == nil {
			break
		}

		return e.complexity.Profile.Description(childComplexity), true

	case "Profile.email":
		if e.complexity.Profile.Email == nil {
			break
		}

		return e.complexity.Profile.Email(childComplexity), true

	case "Profile.externalUserId":
		if e.complexity.Profile.ExternalUserID == nil {
			break
		}

		return e.complexity.Profile.ExternalUserID(childComplexity), true

	case "Profile.firstName":
		if e.complexity.Profile.FirstName == nil {
			break
		}

		return e.complexity.Profile.FirstName(childComplexity), true

	case "Profile.id":
		if e.complexity.Profile.ID == nil {
			break
		}

		return e.complexity.Profile.ID(childComplexity), true

	case "Profile.lastName":
		if e.complexity.Profile.LastName == nil {
			break
		}

		return e.complexity.Profile.LastName(childComplexity), true

	case "Profile.location":
		if e.complexity.Profile.Location == nil {
			break
		}

		return e.complexity.Profile.Location(childComplexity), true

	case "Profile.name":
		if e.complexity.Profile.Name == nil {
			break
		}

		return e.complexity.Profile.Name(childComplexity), true

	case "Profile.nickName":
		if e.complexity.Profile.NickName == nil {
			break
		}

		return e.complexity.Profile.NickName(childComplexity), true

	case "Profile.provider":
		if e.complexity.Profile.Provider == nil {
			break
		}

		return e.complexity.Profile.Provider(childComplexity), true

	case "Profile.updatedAt":
		if e.complexity.Profile.UpdatedAt == nil {
			break
		}

		return e.complexity.Profile.UpdatedAt(childComplexity), true

	case "Profile.updatedBy":
		if e.complexity.Profile.UpdatedBy == nil {
			break
		}

		return e.complexity.Profile.UpdatedBy(childComplexity), true

	case "Profile.users":
		if e.complexity.Profile.Users == nil {
			break
		}

		return e.complexity.Profile.Users(childComplexity), true

	case "Profile.usersConnection":
		if e.complexity.Profile.UsersConnection == nil {
			break
		}

		args, err := ec.field_Profile_usersConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Profile.UsersConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserSortType), args["filter"].(*UserFilterType)), true

	case "Profile.usersIds":
		if e.complexity.Profile.UsersIds == nil {
			break
		}

		return e.complexity.Profile.UsersIds(childComplexity), true

	case "ProfileResultType.count":
		if e.complexity.ProfileResultType.Count == nil {
			break
		}

		return e.complexity.ProfileResultType.Count(childComplexity), true

	case "ProfileResultType.items":
		if e.complexity.ProfileResultType.Items == nil {
			break
		}

		return e.complexity.ProfileResultType.Items(childComplexity), true

	case "Query.permission":
		if e.complexity.Query.Permission == nil {
			break
		}

		args, err := ec.field_Query_permission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Permission(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*PermissionFilterType)), true

	case "Query.permissions":
		if e.complexity.Query.Permissions == nil {
			break
		}

		args, err := ec.field_Query_permissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Permissions(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PermissionSortType), args["filter"].(*PermissionFilterType)), true

	case "Query.profile":
		if e.complexity.Query.Profile == nil {
			break
		}

		args, err := ec.field_Query_profile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Profile(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*ProfileFilterType)), true

	case "Query.profiles":
		if e.complexity.Query.Profiles == nil {
			break
		}

		args, err := ec.field_Query_profiles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Profiles(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*ProfileSortType), args["filter"].(*ProfileFilterType)), true

	case "Query.role":
		if e.complexity.Query.Role == nil {
			break
		}

		args, err := ec.field_Query_role_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Role(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*RoleFilterType)), true

	case "Query.roles":
		if e.complexity.Query.Roles == nil {
			break
		}

		args, err := ec.field_Query_roles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Roles(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*UserFilterType)), true

	case "Query.userAPIKey":
		if e.complexity.Query.UserAPIKey == nil {
			break
		}

		args, err := ec.field_Query_userAPIKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserAPIKey(childComplexity, args["id"].(*string), args["q"].(*string), args["filter"].(*UserAPIKeyFilterType)), true

	case "Query.userAPIKeys":
		if e.complexity.Query.UserAPIKeys == nil {
			break
		}

		args, err := ec.field_Query_userAPIKeys_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserAPIKeys(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserAPIKeySortType), args["filter"].(*UserAPIKeyFilterType)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserSortType), args["filter"].(*UserFilterType)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Role.children":
		if e.complexity.Role.Children == nil {
			break
		}

		return e.complexity.Role.Children(childComplexity), true

	case "Role.childrenConnection":
		if e.complexity.Role.ChildrenConnection == nil {
			break
		}

		args, err := ec.field_Role_childrenConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Role.ChildrenConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType)), true

	case "Role.childrenIds":
		if e.complexity.Role.ChildrenIds == nil {
			break
		}

		return e.complexity.Role.ChildrenIds(childComplexity), true

	case "Role.createdAt":
		if e.complexity.Role.CreatedAt == nil {
			break
		}

		return e.complexity.Role.CreatedAt(childComplexity), true

	case "Role.createdBy":
		if e.complexity.Role.CreatedBy == nil {
			break
		}

		return e.complexity.Role.CreatedBy(childComplexity), true

	case "Role.description":
		if e.complexity.Role.Description == nil {
			break
		}

		return e.complexity.Role.Description(childComplexity), true

	case "Role.domain":
		if e.complexity.Role.Domain == nil {
			break
		}

		return e.complexity.Role.Domain(childComplexity), true

	case "Role.id":
		if e.complexity.Role.ID == nil {
			break
		}

		return e.complexity.Role.ID(childComplexity), true

	case "Role.name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "Role.parents":
		if e.complexity.Role.Parents == nil {
			break
		}

		return e.complexity.Role.Parents(childComplexity), true

	case "Role.parentsConnection":
		if e.complexity.Role.ParentsConnection == nil {
			break
		}

		args, err := ec.field_Role_parentsConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Role.ParentsConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType)), true

	case "Role.parentsIds":
		if e.complexity.Role.ParentsIds == nil {
			break
		}

		return e.complexity.Role.ParentsIds(childComplexity), true

	case "Role.permissions":
		if e.complexity.Role.Permissions == nil {
			break
		}

		return e.complexity.Role.Permissions(childComplexity), true

	case "Role.permissionsConnection":
		if e.complexity.Role.PermissionsConnection == nil {
			break
		}

		args, err := ec.field_Role_permissionsConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Role.PermissionsConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PermissionSortType), args["filter"].(*PermissionFilterType)), true

	case "Role.permissionsIds":
		if e.complexity.Role.PermissionsIds == nil {
			break
		}

		return e.complexity.Role.PermissionsIds(childComplexity), true

	case "Role.updatedAt":
		if e.complexity.Role.UpdatedAt == nil {
			break
		}

		return e.complexity.Role.UpdatedAt(childComplexity), true

	case "Role.updatedBy":
		if e.complexity.Role.UpdatedBy == nil {
			break
		}

		return e.complexity.Role.UpdatedBy(childComplexity), true

	case "Role.users":
		if e.complexity.Role.Users == nil {
			break
		}

		return e.complexity.Role.Users(childComplexity), true

	case "Role.usersConnection":
		if e.complexity.Role.UsersConnection == nil {
			break
		}

		args, err := ec.field_Role_usersConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Role.UsersConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserSortType), args["filter"].(*UserFilterType)), true

	case "Role.usersIds":
		if e.complexity.Role.UsersIds == nil {
			break
		}

		return e.complexity.Role.UsersIds(childComplexity), true

	case "RoleResultType.count":
		if e.complexity.RoleResultType.Count == nil {
			break
		}

		return e.complexity.RoleResultType.Count(childComplexity), true

	case "RoleResultType.items":
		if e.complexity.RoleResultType.Items == nil {
			break
		}

		return e.complexity.RoleResultType.Items(childComplexity), true

	case "User.active":
		if e.complexity.User.Active == nil {
			break
		}

		return e.complexity.User.Active(childComplexity), true

	case "User.apikeys":
		if e.complexity.User.Apikeys == nil {
			break
		}

		return e.complexity.User.Apikeys(childComplexity), true

	case "User.apikeysConnection":
		if e.complexity.User.ApikeysConnection == nil {
			break
		}

		args, err := ec.field_User_apikeysConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.ApikeysConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserAPIKeySortType), args["filter"].(*UserAPIKeyFilterType)), true

	case "User.apikeysIds":
		if e.complexity.User.ApikeysIds == nil {
			break
		}

		return e.complexity.User.ApikeysIds(childComplexity), true

	case "User.avatarURL":
		if e.complexity.User.AvatarURL == nil {
			break
		}

		return e.complexity.User.AvatarURL(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.createdBy":
		if e.complexity.User.CreatedBy == nil {
			break
		}

		return e.complexity.User.CreatedBy(childComplexity), true

	case "User.description":
		if e.complexity.User.Description == nil {
			break
		}

		return e.complexity.User.Description(childComplexity), true

	case "User.displayName":
		if e.complexity.User.DisplayName == nil {
			break
		}

		return e.complexity.User.DisplayName(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.location":
		if e.complexity.User.Location == nil {
			break
		}

		return e.complexity.User.Location(childComplexity), true

	case "User.nickName":
		if e.complexity.User.NickName == nil {
			break
		}

		return e.complexity.User.NickName(childComplexity), true

	case "User.password":
		if e.complexity.User.Password == nil {
			break
		}

		return e.complexity.User.Password(childComplexity), true

	case "User.permissions":
		if e.complexity.User.Permissions == nil {
			break
		}

		return e.complexity.User.Permissions(childComplexity), true

	case "User.permissionsConnection":
		if e.complexity.User.PermissionsConnection == nil {
			break
		}

		args, err := ec.field_User_permissionsConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.PermissionsConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PermissionSortType), args["filter"].(*PermissionFilterType)), true

	case "User.permissionsIds":
		if e.complexity.User.PermissionsIds == nil {
			break
		}

		return e.complexity.User.PermissionsIds(childComplexity), true

	case "User.profiles":
		if e.complexity.User.Profiles == nil {
			break
		}

		return e.complexity.User.Profiles(childComplexity), true

	case "User.profilesConnection":
		if e.complexity.User.ProfilesConnection == nil {
			break
		}

		args, err := ec.field_User_profilesConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.ProfilesConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*ProfileSortType), args["filter"].(*ProfileFilterType)), true

	case "User.profilesIds":
		if e.complexity.User.ProfilesIds == nil {
			break
		}

		return e.complexity.User.ProfilesIds(childComplexity), true

	case "User.roles":
		if e.complexity.User.Roles == nil {
			break
		}

		return e.complexity.User.Roles(childComplexity), true

	case "User.rolesConnection":
		if e.complexity.User.RolesConnection == nil {
			break
		}

		args, err := ec.field_User_rolesConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.RolesConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType)), true

	case "User.rolesIds":
		if e.complexity.User.RolesIds == nil {
			break
		}

		return e.complexity.User.RolesIds(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.updatedBy":
		if e.complexity.User.UpdatedBy == nil {
			break
		}

		return e.complexity.User.UpdatedBy(childComplexity), true

	case "UserAPIKey.createdAt":
		if e.complexity.UserAPIKey.CreatedAt == nil {
			break
		}

		return e.complexity.UserAPIKey.CreatedAt(childComplexity), true

	case "UserAPIKey.createdBy":
		if e.complexity.UserAPIKey.CreatedBy == nil {
			break
		}

		return e.complexity.UserAPIKey.CreatedBy(childComplexity), true

	case "UserAPIKey.description":
		if e.complexity.UserAPIKey.Description == nil {
			break
		}

		return e.complexity.UserAPIKey.Description(childComplexity), true

	case "UserAPIKey.id":
		if e.complexity.UserAPIKey.ID == nil {
			break
		}

		return e.complexity.UserAPIKey.ID(childComplexity), true

	case "UserAPIKey.key":
		if e.complexity.UserAPIKey.Key == nil {
			break
		}

		return e.complexity.UserAPIKey.Key(childComplexity), true

	case "UserAPIKey.permissions":
		if e.complexity.UserAPIKey.Permissions == nil {
			break
		}

		return e.complexity.UserAPIKey.Permissions(childComplexity), true

	case "UserAPIKey.permissionsConnection":
		if e.complexity.UserAPIKey.PermissionsConnection == nil {
			break
		}

		args, err := ec.field_UserAPIKey_permissionsConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserAPIKey.PermissionsConnection(childComplexity, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PermissionSortType), args["filter"].(*PermissionFilterType)), true

	case "UserAPIKey.permissionsIds":
		if e.complexity.UserAPIKey.PermissionsIds == nil {
			break
		}

		return e.complexity.UserAPIKey.PermissionsIds(childComplexity), true

	case "UserAPIKey.updatedAt":
		if e.complexity.UserAPIKey.UpdatedAt == nil {
			break
		}

		return e.complexity.UserAPIKey.UpdatedAt(childComplexity), true

	case "UserAPIKey.updatedBy":
		if e.complexity.UserAPIKey.UpdatedBy == nil {
			break
		}

		return e.complexity.UserAPIKey.UpdatedBy(childComplexity), true

	case "UserAPIKey.user":
		if e.complexity.UserAPIKey.User == nil {
			break
		}

		return e.complexity.UserAPIKey.User(childComplexity), true

	case "UserAPIKey.userId":
		if e.complexity.UserAPIKey.UserID == nil {
			break
		}

		return e.complexity.UserAPIKey.UserID(childComplexity), true

	case "UserAPIKeyResultType.count":
		if e.complexity.UserAPIKeyResultType.Count == nil {
			break
		}

		return e.complexity.UserAPIKeyResultType.Count(childComplexity), true

	case "UserAPIKeyResultType.items":
		if e.complexity.UserAPIKeyResultType.Items == nil {
			break
		}

		return e.complexity.UserAPIKeyResultType.Items(childComplexity), true

	case "UserResultType.count":
		if e.complexity.UserResultType.Count == nil {
			break
		}

		return e.complexity.UserResultType.Count(childComplexity), true

	case "UserResultType.items":
		if e.complexity.UserResultType.Items == nil {
			break
		}

		return e.complexity.UserResultType.Items(childComplexity), true

	case "_Service.sdl":
		if e.complexity.Service.SDL == nil {
			break
		}

		return e.complexity.Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "schema.graphql", Input: `# This schema is generated, please don't update it manually

scalar Time

schema {
  query: Query
  mutation: Mutation
}

type Query {
  _service: _Service!
  user(id: ID, q: String, filter: UserFilterType): User
  users(offset: Int, limit: Int = 30, q: String, sort: [UserSortType!], filter: UserFilterType): UserResultType!
  userAPIKey(id: ID, q: String, filter: UserAPIKeyFilterType): UserAPIKey
  userAPIKeys(offset: Int, limit: Int = 30, q: String, sort: [UserAPIKeySortType!], filter: UserAPIKeyFilterType): UserAPIKeyResultType!
  profile(id: ID, q: String, filter: ProfileFilterType): Profile
  profiles(offset: Int, limit: Int = 30, q: String, sort: [ProfileSortType!], filter: ProfileFilterType): ProfileResultType!
  role(id: ID, q: String, filter: RoleFilterType): Role
  roles(offset: Int, limit: Int = 30, q: String, sort: [RoleSortType!], filter: RoleFilterType): RoleResultType!
  permission(id: ID, q: String, filter: PermissionFilterType): Permission
  permissions(offset: Int, limit: Int = 30, q: String, sort: [PermissionSortType!], filter: PermissionFilterType): PermissionResultType!
}

type Mutation {
  createUser(input: UserCreateInput!): User!
  updateUser(id: ID!, input: UserUpdateInput!): User!
  deleteUser(id: ID!): User!
  deleteAllUsers: Boolean!
  createUserAPIKey(input: UserAPIKeyCreateInput!): UserAPIKey!
  updateUserAPIKey(id: ID!, input: UserAPIKeyUpdateInput!): UserAPIKey!
  deleteUserAPIKey(id: ID!): UserAPIKey!
  deleteAllUserAPIKeys: Boolean!
  createProfile(input: ProfileCreateInput!): Profile!
  updateProfile(id: ID!, input: ProfileUpdateInput!): Profile!
  deleteProfile(id: ID!): Profile!
  deleteAllProfiles: Boolean!
  createRole(input: RoleCreateInput!): Role!
  updateRole(id: ID!, input: RoleUpdateInput!): Role!
  deleteRole(id: ID!): Role!
  deleteAllRoles: Boolean!
  createPermission(input: PermissionCreateInput!): Permission!
  updatePermission(id: ID!, input: PermissionUpdateInput!): Permission!
  deletePermission(id: ID!): Permission!
  deleteAllPermissions: Boolean!
}

enum ObjectSortType {
  ASC
  DESC
}

type User {
  id: ID!
  active: Boolean!
  email: String!
  password: String
  avatarURL: String
  displayName: String
  description: String
  firstName: String
  lastName: String
  nickName: String
  location: String
  apikeys: [UserAPIKey!]!
  roles: [Role!]!
  profiles: [Profile!]!
  permissions: [Permission!]!
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
  apikeysIds: [ID!]!
  apikeysConnection(offset: Int, limit: Int = 30, q: String, sort: [UserAPIKeySortType!], filter: UserAPIKeyFilterType): UserAPIKeyResultType!
  rolesIds: [ID!]!
  rolesConnection(offset: Int, limit: Int = 30, q: String, sort: [RoleSortType!], filter: RoleFilterType): RoleResultType!
  profilesIds: [ID!]!
  profilesConnection(offset: Int, limit: Int = 30, q: String, sort: [ProfileSortType!], filter: ProfileFilterType): ProfileResultType!
  permissionsIds: [ID!]!
  permissionsConnection(offset: Int, limit: Int = 30, q: String, sort: [PermissionSortType!], filter: PermissionFilterType): PermissionResultType!
}

type UserAPIKey {
  id: ID!
  key: String!
  description: String
  user: User
  permissions: [Permission!]!
  userId: ID
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
  permissionsIds: [ID!]!
  permissionsConnection(offset: Int, limit: Int = 30, q: String, sort: [PermissionSortType!], filter: PermissionFilterType): PermissionResultType!
}

type Profile {
  id: ID!
  email: String!
  externalUserId: String
  provider: String
  avatarURL: String
  name: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
  users: [User!]!
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
  usersIds: [ID!]!
  usersConnection(offset: Int, limit: Int = 30, q: String, sort: [UserSortType!], filter: UserFilterType): UserResultType!
}

type Role {
  id: ID!
  domain: String!
  name: String!
  description: String
  users: [User!]!
  parents: [Role!]!
  children: [Role!]!
  permissions: [Permission!]!
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
  usersIds: [ID!]!
  usersConnection(offset: Int, limit: Int = 30, q: String, sort: [UserSortType!], filter: UserFilterType): UserResultType!
  parentsIds: [ID!]!
  parentsConnection(offset: Int, limit: Int = 30, q: String, sort: [RoleSortType!], filter: RoleFilterType): RoleResultType!
  childrenIds: [ID!]!
  childrenConnection(offset: Int, limit: Int = 30, q: String, sort: [RoleSortType!], filter: RoleFilterType): RoleResultType!
  permissionsIds: [ID!]!
  permissionsConnection(offset: Int, limit: Int = 30, q: String, sort: [PermissionSortType!], filter: PermissionFilterType): PermissionResultType!
}

type Permission {
  id: ID!
  domain: String!
  tag: String!
  description: String!
  users: [User!]!
  roles: [Role!]!
  apikeys: [UserAPIKey!]!
  updatedAt: Time
  createdAt: Time!
  updatedBy: ID
  createdBy: ID
  usersIds: [ID!]!
  usersConnection(offset: Int, limit: Int = 30, q: String, sort: [UserSortType!], filter: UserFilterType): UserResultType!
  rolesIds: [ID!]!
  rolesConnection(offset: Int, limit: Int = 30, q: String, sort: [RoleSortType!], filter: RoleFilterType): RoleResultType!
  apikeysIds: [ID!]!
  apikeysConnection(offset: Int, limit: Int = 30, q: String, sort: [UserAPIKeySortType!], filter: UserAPIKeyFilterType): UserAPIKeyResultType!
}

input UserCreateInput {
  id: ID
  active: Boolean!
  email: String!
  password: String
  avatarURL: String
  displayName: String
  description: String
  firstName: String
  lastName: String
  nickName: String
  location: String
  apikeysIds: [ID!]
  rolesIds: [ID!]
  profilesIds: [ID!]
  permissionsIds: [ID!]
}

input UserUpdateInput {
  active: Boolean
  email: String
  password: String
  avatarURL: String
  displayName: String
  description: String
  firstName: String
  lastName: String
  nickName: String
  location: String
  apikeysIds: [ID!]
  rolesIds: [ID!]
  profilesIds: [ID!]
  permissionsIds: [ID!]
}

input UserSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  active: ObjectSortType
  activeMin: ObjectSortType
  activeMax: ObjectSortType
  email: ObjectSortType
  emailMin: ObjectSortType
  emailMax: ObjectSortType
  password: ObjectSortType
  passwordMin: ObjectSortType
  passwordMax: ObjectSortType
  avatarURL: ObjectSortType
  avatarURLMin: ObjectSortType
  avatarURLMax: ObjectSortType
  displayName: ObjectSortType
  displayNameMin: ObjectSortType
  displayNameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  firstName: ObjectSortType
  firstNameMin: ObjectSortType
  firstNameMax: ObjectSortType
  lastName: ObjectSortType
  lastNameMin: ObjectSortType
  lastNameMax: ObjectSortType
  nickName: ObjectSortType
  nickNameMin: ObjectSortType
  nickNameMax: ObjectSortType
  location: ObjectSortType
  locationMin: ObjectSortType
  locationMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  apikeysIds: ObjectSortType
  apikeysIdsMin: ObjectSortType
  apikeysIdsMax: ObjectSortType
  rolesIds: ObjectSortType
  rolesIdsMin: ObjectSortType
  rolesIdsMax: ObjectSortType
  profilesIds: ObjectSortType
  profilesIdsMin: ObjectSortType
  profilesIdsMax: ObjectSortType
  permissionsIds: ObjectSortType
  permissionsIdsMin: ObjectSortType
  permissionsIdsMax: ObjectSortType
  apikeys: UserAPIKeySortType
  roles: RoleSortType
  profiles: ProfileSortType
  permissions: PermissionSortType
}

input UserFilterType {
  AND: [UserFilterType!]
  OR: [UserFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  active: Boolean
  activeMin: Boolean
  activeMax: Boolean
  active_ne: Boolean
  activeMin_ne: Boolean
  activeMax_ne: Boolean
  active_gt: Boolean
  activeMin_gt: Boolean
  activeMax_gt: Boolean
  active_lt: Boolean
  activeMin_lt: Boolean
  activeMax_lt: Boolean
  active_gte: Boolean
  activeMin_gte: Boolean
  activeMax_gte: Boolean
  active_lte: Boolean
  activeMin_lte: Boolean
  activeMax_lte: Boolean
  active_in: [Boolean!]
  activeMin_in: [Boolean!]
  activeMax_in: [Boolean!]
  active_not_in: [Boolean!]
  activeMin_not_in: [Boolean!]
  activeMax_not_in: [Boolean!]
  active_null: Boolean
  email: String
  emailMin: String
  emailMax: String
  email_ne: String
  emailMin_ne: String
  emailMax_ne: String
  email_gt: String
  emailMin_gt: String
  emailMax_gt: String
  email_lt: String
  emailMin_lt: String
  emailMax_lt: String
  email_gte: String
  emailMin_gte: String
  emailMax_gte: String
  email_lte: String
  emailMin_lte: String
  emailMax_lte: String
  email_in: [String!]
  emailMin_in: [String!]
  emailMax_in: [String!]
  email_not_in: [String!]
  emailMin_not_in: [String!]
  emailMax_not_in: [String!]
  email_like: String
  emailMin_like: String
  emailMax_like: String
  email_prefix: String
  emailMin_prefix: String
  emailMax_prefix: String
  email_suffix: String
  emailMin_suffix: String
  emailMax_suffix: String
  email_null: Boolean
  password: String
  passwordMin: String
  passwordMax: String
  password_ne: String
  passwordMin_ne: String
  passwordMax_ne: String
  password_gt: String
  passwordMin_gt: String
  passwordMax_gt: String
  password_lt: String
  passwordMin_lt: String
  passwordMax_lt: String
  password_gte: String
  passwordMin_gte: String
  passwordMax_gte: String
  password_lte: String
  passwordMin_lte: String
  passwordMax_lte: String
  password_in: [String!]
  passwordMin_in: [String!]
  passwordMax_in: [String!]
  password_not_in: [String!]
  passwordMin_not_in: [String!]
  passwordMax_not_in: [String!]
  password_like: String
  passwordMin_like: String
  passwordMax_like: String
  password_prefix: String
  passwordMin_prefix: String
  passwordMax_prefix: String
  password_suffix: String
  passwordMin_suffix: String
  passwordMax_suffix: String
  password_null: Boolean
  avatarURL: String
  avatarURLMin: String
  avatarURLMax: String
  avatarURL_ne: String
  avatarURLMin_ne: String
  avatarURLMax_ne: String
  avatarURL_gt: String
  avatarURLMin_gt: String
  avatarURLMax_gt: String
  avatarURL_lt: String
  avatarURLMin_lt: String
  avatarURLMax_lt: String
  avatarURL_gte: String
  avatarURLMin_gte: String
  avatarURLMax_gte: String
  avatarURL_lte: String
  avatarURLMin_lte: String
  avatarURLMax_lte: String
  avatarURL_in: [String!]
  avatarURLMin_in: [String!]
  avatarURLMax_in: [String!]
  avatarURL_not_in: [String!]
  avatarURLMin_not_in: [String!]
  avatarURLMax_not_in: [String!]
  avatarURL_like: String
  avatarURLMin_like: String
  avatarURLMax_like: String
  avatarURL_prefix: String
  avatarURLMin_prefix: String
  avatarURLMax_prefix: String
  avatarURL_suffix: String
  avatarURLMin_suffix: String
  avatarURLMax_suffix: String
  avatarURL_null: Boolean
  displayName: String
  displayNameMin: String
  displayNameMax: String
  displayName_ne: String
  displayNameMin_ne: String
  displayNameMax_ne: String
  displayName_gt: String
  displayNameMin_gt: String
  displayNameMax_gt: String
  displayName_lt: String
  displayNameMin_lt: String
  displayNameMax_lt: String
  displayName_gte: String
  displayNameMin_gte: String
  displayNameMax_gte: String
  displayName_lte: String
  displayNameMin_lte: String
  displayNameMax_lte: String
  displayName_in: [String!]
  displayNameMin_in: [String!]
  displayNameMax_in: [String!]
  displayName_not_in: [String!]
  displayNameMin_not_in: [String!]
  displayNameMax_not_in: [String!]
  displayName_like: String
  displayNameMin_like: String
  displayNameMax_like: String
  displayName_prefix: String
  displayNameMin_prefix: String
  displayNameMax_prefix: String
  displayName_suffix: String
  displayNameMin_suffix: String
  displayNameMax_suffix: String
  displayName_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  firstName: String
  firstNameMin: String
  firstNameMax: String
  firstName_ne: String
  firstNameMin_ne: String
  firstNameMax_ne: String
  firstName_gt: String
  firstNameMin_gt: String
  firstNameMax_gt: String
  firstName_lt: String
  firstNameMin_lt: String
  firstNameMax_lt: String
  firstName_gte: String
  firstNameMin_gte: String
  firstNameMax_gte: String
  firstName_lte: String
  firstNameMin_lte: String
  firstNameMax_lte: String
  firstName_in: [String!]
  firstNameMin_in: [String!]
  firstNameMax_in: [String!]
  firstName_not_in: [String!]
  firstNameMin_not_in: [String!]
  firstNameMax_not_in: [String!]
  firstName_like: String
  firstNameMin_like: String
  firstNameMax_like: String
  firstName_prefix: String
  firstNameMin_prefix: String
  firstNameMax_prefix: String
  firstName_suffix: String
  firstNameMin_suffix: String
  firstNameMax_suffix: String
  firstName_null: Boolean
  lastName: String
  lastNameMin: String
  lastNameMax: String
  lastName_ne: String
  lastNameMin_ne: String
  lastNameMax_ne: String
  lastName_gt: String
  lastNameMin_gt: String
  lastNameMax_gt: String
  lastName_lt: String
  lastNameMin_lt: String
  lastNameMax_lt: String
  lastName_gte: String
  lastNameMin_gte: String
  lastNameMax_gte: String
  lastName_lte: String
  lastNameMin_lte: String
  lastNameMax_lte: String
  lastName_in: [String!]
  lastNameMin_in: [String!]
  lastNameMax_in: [String!]
  lastName_not_in: [String!]
  lastNameMin_not_in: [String!]
  lastNameMax_not_in: [String!]
  lastName_like: String
  lastNameMin_like: String
  lastNameMax_like: String
  lastName_prefix: String
  lastNameMin_prefix: String
  lastNameMax_prefix: String
  lastName_suffix: String
  lastNameMin_suffix: String
  lastNameMax_suffix: String
  lastName_null: Boolean
  nickName: String
  nickNameMin: String
  nickNameMax: String
  nickName_ne: String
  nickNameMin_ne: String
  nickNameMax_ne: String
  nickName_gt: String
  nickNameMin_gt: String
  nickNameMax_gt: String
  nickName_lt: String
  nickNameMin_lt: String
  nickNameMax_lt: String
  nickName_gte: String
  nickNameMin_gte: String
  nickNameMax_gte: String
  nickName_lte: String
  nickNameMin_lte: String
  nickNameMax_lte: String
  nickName_in: [String!]
  nickNameMin_in: [String!]
  nickNameMax_in: [String!]
  nickName_not_in: [String!]
  nickNameMin_not_in: [String!]
  nickNameMax_not_in: [String!]
  nickName_like: String
  nickNameMin_like: String
  nickNameMax_like: String
  nickName_prefix: String
  nickNameMin_prefix: String
  nickNameMax_prefix: String
  nickName_suffix: String
  nickNameMin_suffix: String
  nickNameMax_suffix: String
  nickName_null: Boolean
  location: String
  locationMin: String
  locationMax: String
  location_ne: String
  locationMin_ne: String
  locationMax_ne: String
  location_gt: String
  locationMin_gt: String
  locationMax_gt: String
  location_lt: String
  locationMin_lt: String
  locationMax_lt: String
  location_gte: String
  locationMin_gte: String
  locationMax_gte: String
  location_lte: String
  locationMin_lte: String
  locationMax_lte: String
  location_in: [String!]
  locationMin_in: [String!]
  locationMax_in: [String!]
  location_not_in: [String!]
  locationMin_not_in: [String!]
  locationMax_not_in: [String!]
  location_like: String
  locationMin_like: String
  locationMax_like: String
  location_prefix: String
  locationMin_prefix: String
  locationMax_prefix: String
  location_suffix: String
  locationMin_suffix: String
  locationMax_suffix: String
  location_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  apikeys: UserAPIKeyFilterType
  roles: RoleFilterType
  profiles: ProfileFilterType
  permissions: PermissionFilterType
}

type UserResultType {
  items: [User!]!
  count: Int!
}

input UserAPIKeyCreateInput {
  id: ID
  key: String!
  description: String
  userId: ID
  permissionsIds: [ID!]
}

input UserAPIKeyUpdateInput {
  key: String
  description: String
  userId: ID
  permissionsIds: [ID!]
}

input UserAPIKeySortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  key: ObjectSortType
  keyMin: ObjectSortType
  keyMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  userId: ObjectSortType
  userIdMin: ObjectSortType
  userIdMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  permissionsIds: ObjectSortType
  permissionsIdsMin: ObjectSortType
  permissionsIdsMax: ObjectSortType
  user: UserSortType
  permissions: PermissionSortType
}

input UserAPIKeyFilterType {
  AND: [UserAPIKeyFilterType!]
  OR: [UserAPIKeyFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  key: String
  keyMin: String
  keyMax: String
  key_ne: String
  keyMin_ne: String
  keyMax_ne: String
  key_gt: String
  keyMin_gt: String
  keyMax_gt: String
  key_lt: String
  keyMin_lt: String
  keyMax_lt: String
  key_gte: String
  keyMin_gte: String
  keyMax_gte: String
  key_lte: String
  keyMin_lte: String
  keyMax_lte: String
  key_in: [String!]
  keyMin_in: [String!]
  keyMax_in: [String!]
  key_not_in: [String!]
  keyMin_not_in: [String!]
  keyMax_not_in: [String!]
  key_like: String
  keyMin_like: String
  keyMax_like: String
  key_prefix: String
  keyMin_prefix: String
  keyMax_prefix: String
  key_suffix: String
  keyMin_suffix: String
  keyMax_suffix: String
  key_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  userId: ID
  userIdMin: ID
  userIdMax: ID
  userId_ne: ID
  userIdMin_ne: ID
  userIdMax_ne: ID
  userId_gt: ID
  userIdMin_gt: ID
  userIdMax_gt: ID
  userId_lt: ID
  userIdMin_lt: ID
  userIdMax_lt: ID
  userId_gte: ID
  userIdMin_gte: ID
  userIdMax_gte: ID
  userId_lte: ID
  userIdMin_lte: ID
  userIdMax_lte: ID
  userId_in: [ID!]
  userIdMin_in: [ID!]
  userIdMax_in: [ID!]
  userId_not_in: [ID!]
  userIdMin_not_in: [ID!]
  userIdMax_not_in: [ID!]
  userId_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  user: UserFilterType
  permissions: PermissionFilterType
}

type UserAPIKeyResultType {
  items: [UserAPIKey!]!
  count: Int!
}

input ProfileCreateInput {
  id: ID
  email: String!
  externalUserId: String
  provider: String
  avatarURL: String
  name: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
  usersIds: [ID!]
}

input ProfileUpdateInput {
  email: String
  externalUserId: String
  provider: String
  avatarURL: String
  name: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
  usersIds: [ID!]
}

input ProfileSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  email: ObjectSortType
  emailMin: ObjectSortType
  emailMax: ObjectSortType
  externalUserId: ObjectSortType
  externalUserIdMin: ObjectSortType
  externalUserIdMax: ObjectSortType
  provider: ObjectSortType
  providerMin: ObjectSortType
  providerMax: ObjectSortType
  avatarURL: ObjectSortType
  avatarURLMin: ObjectSortType
  avatarURLMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  firstName: ObjectSortType
  firstNameMin: ObjectSortType
  firstNameMax: ObjectSortType
  lastName: ObjectSortType
  lastNameMin: ObjectSortType
  lastNameMax: ObjectSortType
  nickName: ObjectSortType
  nickNameMin: ObjectSortType
  nickNameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  location: ObjectSortType
  locationMin: ObjectSortType
  locationMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  usersIds: ObjectSortType
  usersIdsMin: ObjectSortType
  usersIdsMax: ObjectSortType
  users: UserSortType
}

input ProfileFilterType {
  AND: [ProfileFilterType!]
  OR: [ProfileFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  email: String
  emailMin: String
  emailMax: String
  email_ne: String
  emailMin_ne: String
  emailMax_ne: String
  email_gt: String
  emailMin_gt: String
  emailMax_gt: String
  email_lt: String
  emailMin_lt: String
  emailMax_lt: String
  email_gte: String
  emailMin_gte: String
  emailMax_gte: String
  email_lte: String
  emailMin_lte: String
  emailMax_lte: String
  email_in: [String!]
  emailMin_in: [String!]
  emailMax_in: [String!]
  email_not_in: [String!]
  emailMin_not_in: [String!]
  emailMax_not_in: [String!]
  email_like: String
  emailMin_like: String
  emailMax_like: String
  email_prefix: String
  emailMin_prefix: String
  emailMax_prefix: String
  email_suffix: String
  emailMin_suffix: String
  emailMax_suffix: String
  email_null: Boolean
  externalUserId: String
  externalUserIdMin: String
  externalUserIdMax: String
  externalUserId_ne: String
  externalUserIdMin_ne: String
  externalUserIdMax_ne: String
  externalUserId_gt: String
  externalUserIdMin_gt: String
  externalUserIdMax_gt: String
  externalUserId_lt: String
  externalUserIdMin_lt: String
  externalUserIdMax_lt: String
  externalUserId_gte: String
  externalUserIdMin_gte: String
  externalUserIdMax_gte: String
  externalUserId_lte: String
  externalUserIdMin_lte: String
  externalUserIdMax_lte: String
  externalUserId_in: [String!]
  externalUserIdMin_in: [String!]
  externalUserIdMax_in: [String!]
  externalUserId_not_in: [String!]
  externalUserIdMin_not_in: [String!]
  externalUserIdMax_not_in: [String!]
  externalUserId_like: String
  externalUserIdMin_like: String
  externalUserIdMax_like: String
  externalUserId_prefix: String
  externalUserIdMin_prefix: String
  externalUserIdMax_prefix: String
  externalUserId_suffix: String
  externalUserIdMin_suffix: String
  externalUserIdMax_suffix: String
  externalUserId_null: Boolean
  provider: String
  providerMin: String
  providerMax: String
  provider_ne: String
  providerMin_ne: String
  providerMax_ne: String
  provider_gt: String
  providerMin_gt: String
  providerMax_gt: String
  provider_lt: String
  providerMin_lt: String
  providerMax_lt: String
  provider_gte: String
  providerMin_gte: String
  providerMax_gte: String
  provider_lte: String
  providerMin_lte: String
  providerMax_lte: String
  provider_in: [String!]
  providerMin_in: [String!]
  providerMax_in: [String!]
  provider_not_in: [String!]
  providerMin_not_in: [String!]
  providerMax_not_in: [String!]
  provider_like: String
  providerMin_like: String
  providerMax_like: String
  provider_prefix: String
  providerMin_prefix: String
  providerMax_prefix: String
  provider_suffix: String
  providerMin_suffix: String
  providerMax_suffix: String
  provider_null: Boolean
  avatarURL: String
  avatarURLMin: String
  avatarURLMax: String
  avatarURL_ne: String
  avatarURLMin_ne: String
  avatarURLMax_ne: String
  avatarURL_gt: String
  avatarURLMin_gt: String
  avatarURLMax_gt: String
  avatarURL_lt: String
  avatarURLMin_lt: String
  avatarURLMax_lt: String
  avatarURL_gte: String
  avatarURLMin_gte: String
  avatarURLMax_gte: String
  avatarURL_lte: String
  avatarURLMin_lte: String
  avatarURLMax_lte: String
  avatarURL_in: [String!]
  avatarURLMin_in: [String!]
  avatarURLMax_in: [String!]
  avatarURL_not_in: [String!]
  avatarURLMin_not_in: [String!]
  avatarURLMax_not_in: [String!]
  avatarURL_like: String
  avatarURLMin_like: String
  avatarURLMax_like: String
  avatarURL_prefix: String
  avatarURLMin_prefix: String
  avatarURLMax_prefix: String
  avatarURL_suffix: String
  avatarURLMin_suffix: String
  avatarURLMax_suffix: String
  avatarURL_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_not_in: [String!]
  nameMin_not_in: [String!]
  nameMax_not_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  firstName: String
  firstNameMin: String
  firstNameMax: String
  firstName_ne: String
  firstNameMin_ne: String
  firstNameMax_ne: String
  firstName_gt: String
  firstNameMin_gt: String
  firstNameMax_gt: String
  firstName_lt: String
  firstNameMin_lt: String
  firstNameMax_lt: String
  firstName_gte: String
  firstNameMin_gte: String
  firstNameMax_gte: String
  firstName_lte: String
  firstNameMin_lte: String
  firstNameMax_lte: String
  firstName_in: [String!]
  firstNameMin_in: [String!]
  firstNameMax_in: [String!]
  firstName_not_in: [String!]
  firstNameMin_not_in: [String!]
  firstNameMax_not_in: [String!]
  firstName_like: String
  firstNameMin_like: String
  firstNameMax_like: String
  firstName_prefix: String
  firstNameMin_prefix: String
  firstNameMax_prefix: String
  firstName_suffix: String
  firstNameMin_suffix: String
  firstNameMax_suffix: String
  firstName_null: Boolean
  lastName: String
  lastNameMin: String
  lastNameMax: String
  lastName_ne: String
  lastNameMin_ne: String
  lastNameMax_ne: String
  lastName_gt: String
  lastNameMin_gt: String
  lastNameMax_gt: String
  lastName_lt: String
  lastNameMin_lt: String
  lastNameMax_lt: String
  lastName_gte: String
  lastNameMin_gte: String
  lastNameMax_gte: String
  lastName_lte: String
  lastNameMin_lte: String
  lastNameMax_lte: String
  lastName_in: [String!]
  lastNameMin_in: [String!]
  lastNameMax_in: [String!]
  lastName_not_in: [String!]
  lastNameMin_not_in: [String!]
  lastNameMax_not_in: [String!]
  lastName_like: String
  lastNameMin_like: String
  lastNameMax_like: String
  lastName_prefix: String
  lastNameMin_prefix: String
  lastNameMax_prefix: String
  lastName_suffix: String
  lastNameMin_suffix: String
  lastNameMax_suffix: String
  lastName_null: Boolean
  nickName: String
  nickNameMin: String
  nickNameMax: String
  nickName_ne: String
  nickNameMin_ne: String
  nickNameMax_ne: String
  nickName_gt: String
  nickNameMin_gt: String
  nickNameMax_gt: String
  nickName_lt: String
  nickNameMin_lt: String
  nickNameMax_lt: String
  nickName_gte: String
  nickNameMin_gte: String
  nickNameMax_gte: String
  nickName_lte: String
  nickNameMin_lte: String
  nickNameMax_lte: String
  nickName_in: [String!]
  nickNameMin_in: [String!]
  nickNameMax_in: [String!]
  nickName_not_in: [String!]
  nickNameMin_not_in: [String!]
  nickNameMax_not_in: [String!]
  nickName_like: String
  nickNameMin_like: String
  nickNameMax_like: String
  nickName_prefix: String
  nickNameMin_prefix: String
  nickNameMax_prefix: String
  nickName_suffix: String
  nickNameMin_suffix: String
  nickNameMax_suffix: String
  nickName_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  location: String
  locationMin: String
  locationMax: String
  location_ne: String
  locationMin_ne: String
  locationMax_ne: String
  location_gt: String
  locationMin_gt: String
  locationMax_gt: String
  location_lt: String
  locationMin_lt: String
  locationMax_lt: String
  location_gte: String
  locationMin_gte: String
  locationMax_gte: String
  location_lte: String
  locationMin_lte: String
  locationMax_lte: String
  location_in: [String!]
  locationMin_in: [String!]
  locationMax_in: [String!]
  location_not_in: [String!]
  locationMin_not_in: [String!]
  locationMax_not_in: [String!]
  location_like: String
  locationMin_like: String
  locationMax_like: String
  location_prefix: String
  locationMin_prefix: String
  locationMax_prefix: String
  location_suffix: String
  locationMin_suffix: String
  locationMax_suffix: String
  location_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  users: UserFilterType
}

type ProfileResultType {
  items: [Profile!]!
  count: Int!
}

input RoleCreateInput {
  id: ID
  domain: String!
  name: String!
  description: String
  usersIds: [ID!]
  parentsIds: [ID!]
  childrenIds: [ID!]
  permissionsIds: [ID!]
}

input RoleUpdateInput {
  domain: String
  name: String
  description: String
  usersIds: [ID!]
  parentsIds: [ID!]
  childrenIds: [ID!]
  permissionsIds: [ID!]
}

input RoleSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  domain: ObjectSortType
  domainMin: ObjectSortType
  domainMax: ObjectSortType
  name: ObjectSortType
  nameMin: ObjectSortType
  nameMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  usersIds: ObjectSortType
  usersIdsMin: ObjectSortType
  usersIdsMax: ObjectSortType
  parentsIds: ObjectSortType
  parentsIdsMin: ObjectSortType
  parentsIdsMax: ObjectSortType
  childrenIds: ObjectSortType
  childrenIdsMin: ObjectSortType
  childrenIdsMax: ObjectSortType
  permissionsIds: ObjectSortType
  permissionsIdsMin: ObjectSortType
  permissionsIdsMax: ObjectSortType
  users: UserSortType
  parents: RoleSortType
  children: RoleSortType
  permissions: PermissionSortType
}

input RoleFilterType {
  AND: [RoleFilterType!]
  OR: [RoleFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  domain: String
  domainMin: String
  domainMax: String
  domain_ne: String
  domainMin_ne: String
  domainMax_ne: String
  domain_gt: String
  domainMin_gt: String
  domainMax_gt: String
  domain_lt: String
  domainMin_lt: String
  domainMax_lt: String
  domain_gte: String
  domainMin_gte: String
  domainMax_gte: String
  domain_lte: String
  domainMin_lte: String
  domainMax_lte: String
  domain_in: [String!]
  domainMin_in: [String!]
  domainMax_in: [String!]
  domain_not_in: [String!]
  domainMin_not_in: [String!]
  domainMax_not_in: [String!]
  domain_like: String
  domainMin_like: String
  domainMax_like: String
  domain_prefix: String
  domainMin_prefix: String
  domainMax_prefix: String
  domain_suffix: String
  domainMin_suffix: String
  domainMax_suffix: String
  domain_null: Boolean
  name: String
  nameMin: String
  nameMax: String
  name_ne: String
  nameMin_ne: String
  nameMax_ne: String
  name_gt: String
  nameMin_gt: String
  nameMax_gt: String
  name_lt: String
  nameMin_lt: String
  nameMax_lt: String
  name_gte: String
  nameMin_gte: String
  nameMax_gte: String
  name_lte: String
  nameMin_lte: String
  nameMax_lte: String
  name_in: [String!]
  nameMin_in: [String!]
  nameMax_in: [String!]
  name_not_in: [String!]
  nameMin_not_in: [String!]
  nameMax_not_in: [String!]
  name_like: String
  nameMin_like: String
  nameMax_like: String
  name_prefix: String
  nameMin_prefix: String
  nameMax_prefix: String
  name_suffix: String
  nameMin_suffix: String
  nameMax_suffix: String
  name_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  users: UserFilterType
  parents: RoleFilterType
  children: RoleFilterType
  permissions: PermissionFilterType
}

type RoleResultType {
  items: [Role!]!
  count: Int!
}

input PermissionCreateInput {
  id: ID
  domain: String!
  tag: String!
  description: String!
  usersIds: [ID!]
  rolesIds: [ID!]
  apikeysIds: [ID!]
}

input PermissionUpdateInput {
  domain: String
  tag: String
  description: String
  usersIds: [ID!]
  rolesIds: [ID!]
  apikeysIds: [ID!]
}

input PermissionSortType {
  id: ObjectSortType
  idMin: ObjectSortType
  idMax: ObjectSortType
  domain: ObjectSortType
  domainMin: ObjectSortType
  domainMax: ObjectSortType
  tag: ObjectSortType
  tagMin: ObjectSortType
  tagMax: ObjectSortType
  description: ObjectSortType
  descriptionMin: ObjectSortType
  descriptionMax: ObjectSortType
  updatedAt: ObjectSortType
  updatedAtMin: ObjectSortType
  updatedAtMax: ObjectSortType
  createdAt: ObjectSortType
  createdAtMin: ObjectSortType
  createdAtMax: ObjectSortType
  updatedBy: ObjectSortType
  updatedByMin: ObjectSortType
  updatedByMax: ObjectSortType
  createdBy: ObjectSortType
  createdByMin: ObjectSortType
  createdByMax: ObjectSortType
  usersIds: ObjectSortType
  usersIdsMin: ObjectSortType
  usersIdsMax: ObjectSortType
  rolesIds: ObjectSortType
  rolesIdsMin: ObjectSortType
  rolesIdsMax: ObjectSortType
  apikeysIds: ObjectSortType
  apikeysIdsMin: ObjectSortType
  apikeysIdsMax: ObjectSortType
  users: UserSortType
  roles: RoleSortType
  apikeys: UserAPIKeySortType
}

input PermissionFilterType {
  AND: [PermissionFilterType!]
  OR: [PermissionFilterType!]
  id: ID
  idMin: ID
  idMax: ID
  id_ne: ID
  idMin_ne: ID
  idMax_ne: ID
  id_gt: ID
  idMin_gt: ID
  idMax_gt: ID
  id_lt: ID
  idMin_lt: ID
  idMax_lt: ID
  id_gte: ID
  idMin_gte: ID
  idMax_gte: ID
  id_lte: ID
  idMin_lte: ID
  idMax_lte: ID
  id_in: [ID!]
  idMin_in: [ID!]
  idMax_in: [ID!]
  id_not_in: [ID!]
  idMin_not_in: [ID!]
  idMax_not_in: [ID!]
  id_null: Boolean
  domain: String
  domainMin: String
  domainMax: String
  domain_ne: String
  domainMin_ne: String
  domainMax_ne: String
  domain_gt: String
  domainMin_gt: String
  domainMax_gt: String
  domain_lt: String
  domainMin_lt: String
  domainMax_lt: String
  domain_gte: String
  domainMin_gte: String
  domainMax_gte: String
  domain_lte: String
  domainMin_lte: String
  domainMax_lte: String
  domain_in: [String!]
  domainMin_in: [String!]
  domainMax_in: [String!]
  domain_not_in: [String!]
  domainMin_not_in: [String!]
  domainMax_not_in: [String!]
  domain_like: String
  domainMin_like: String
  domainMax_like: String
  domain_prefix: String
  domainMin_prefix: String
  domainMax_prefix: String
  domain_suffix: String
  domainMin_suffix: String
  domainMax_suffix: String
  domain_null: Boolean
  tag: String
  tagMin: String
  tagMax: String
  tag_ne: String
  tagMin_ne: String
  tagMax_ne: String
  tag_gt: String
  tagMin_gt: String
  tagMax_gt: String
  tag_lt: String
  tagMin_lt: String
  tagMax_lt: String
  tag_gte: String
  tagMin_gte: String
  tagMax_gte: String
  tag_lte: String
  tagMin_lte: String
  tagMax_lte: String
  tag_in: [String!]
  tagMin_in: [String!]
  tagMax_in: [String!]
  tag_not_in: [String!]
  tagMin_not_in: [String!]
  tagMax_not_in: [String!]
  tag_like: String
  tagMin_like: String
  tagMax_like: String
  tag_prefix: String
  tagMin_prefix: String
  tagMax_prefix: String
  tag_suffix: String
  tagMin_suffix: String
  tagMax_suffix: String
  tag_null: Boolean
  description: String
  descriptionMin: String
  descriptionMax: String
  description_ne: String
  descriptionMin_ne: String
  descriptionMax_ne: String
  description_gt: String
  descriptionMin_gt: String
  descriptionMax_gt: String
  description_lt: String
  descriptionMin_lt: String
  descriptionMax_lt: String
  description_gte: String
  descriptionMin_gte: String
  descriptionMax_gte: String
  description_lte: String
  descriptionMin_lte: String
  descriptionMax_lte: String
  description_in: [String!]
  descriptionMin_in: [String!]
  descriptionMax_in: [String!]
  description_not_in: [String!]
  descriptionMin_not_in: [String!]
  descriptionMax_not_in: [String!]
  description_like: String
  descriptionMin_like: String
  descriptionMax_like: String
  description_prefix: String
  descriptionMin_prefix: String
  descriptionMax_prefix: String
  description_suffix: String
  descriptionMin_suffix: String
  descriptionMax_suffix: String
  description_null: Boolean
  updatedAt: Time
  updatedAtMin: Time
  updatedAtMax: Time
  updatedAt_ne: Time
  updatedAtMin_ne: Time
  updatedAtMax_ne: Time
  updatedAt_gt: Time
  updatedAtMin_gt: Time
  updatedAtMax_gt: Time
  updatedAt_lt: Time
  updatedAtMin_lt: Time
  updatedAtMax_lt: Time
  updatedAt_gte: Time
  updatedAtMin_gte: Time
  updatedAtMax_gte: Time
  updatedAt_lte: Time
  updatedAtMin_lte: Time
  updatedAtMax_lte: Time
  updatedAt_in: [Time!]
  updatedAtMin_in: [Time!]
  updatedAtMax_in: [Time!]
  updatedAt_not_in: [Time!]
  updatedAtMin_not_in: [Time!]
  updatedAtMax_not_in: [Time!]
  updatedAt_null: Boolean
  createdAt: Time
  createdAtMin: Time
  createdAtMax: Time
  createdAt_ne: Time
  createdAtMin_ne: Time
  createdAtMax_ne: Time
  createdAt_gt: Time
  createdAtMin_gt: Time
  createdAtMax_gt: Time
  createdAt_lt: Time
  createdAtMin_lt: Time
  createdAtMax_lt: Time
  createdAt_gte: Time
  createdAtMin_gte: Time
  createdAtMax_gte: Time
  createdAt_lte: Time
  createdAtMin_lte: Time
  createdAtMax_lte: Time
  createdAt_in: [Time!]
  createdAtMin_in: [Time!]
  createdAtMax_in: [Time!]
  createdAt_not_in: [Time!]
  createdAtMin_not_in: [Time!]
  createdAtMax_not_in: [Time!]
  createdAt_null: Boolean
  updatedBy: ID
  updatedByMin: ID
  updatedByMax: ID
  updatedBy_ne: ID
  updatedByMin_ne: ID
  updatedByMax_ne: ID
  updatedBy_gt: ID
  updatedByMin_gt: ID
  updatedByMax_gt: ID
  updatedBy_lt: ID
  updatedByMin_lt: ID
  updatedByMax_lt: ID
  updatedBy_gte: ID
  updatedByMin_gte: ID
  updatedByMax_gte: ID
  updatedBy_lte: ID
  updatedByMin_lte: ID
  updatedByMax_lte: ID
  updatedBy_in: [ID!]
  updatedByMin_in: [ID!]
  updatedByMax_in: [ID!]
  updatedBy_not_in: [ID!]
  updatedByMin_not_in: [ID!]
  updatedByMax_not_in: [ID!]
  updatedBy_null: Boolean
  createdBy: ID
  createdByMin: ID
  createdByMax: ID
  createdBy_ne: ID
  createdByMin_ne: ID
  createdByMax_ne: ID
  createdBy_gt: ID
  createdByMin_gt: ID
  createdByMax_gt: ID
  createdBy_lt: ID
  createdByMin_lt: ID
  createdByMax_lt: ID
  createdBy_gte: ID
  createdByMin_gte: ID
  createdByMax_gte: ID
  createdBy_lte: ID
  createdByMin_lte: ID
  createdByMax_lte: ID
  createdBy_in: [ID!]
  createdByMin_in: [ID!]
  createdByMax_in: [ID!]
  createdBy_not_in: [ID!]
  createdByMin_not_in: [ID!]
  createdByMax_not_in: [ID!]
  createdBy_null: Boolean
  users: UserFilterType
  roles: RoleFilterType
  apikeys: UserAPIKeyFilterType
}

type PermissionResultType {
  items: [Permission!]!
  count: Int!
}

type _Service {
  sdl: String
}
`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPermissionCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNProfileCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRoleCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserAPIKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserAPIKeyCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserCreateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserAPIKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPermissionUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNProfileUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRoleUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserAPIKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUserAPIKeyUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUserUpdateInput2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Permission_apikeysConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*UserAPIKeySortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOUserAPIKeySortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeySortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *UserAPIKeyFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOUserAPIKeyFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Permission_rolesConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*RoleSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalORoleSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *RoleFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Permission_usersConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*UserSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOUserSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *UserFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Profile_usersConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*UserSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOUserSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *UserFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_permission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *PermissionFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_permissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PermissionSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPermissionSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PermissionFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_profile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *ProfileFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOProfileFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_profiles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*ProfileSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOProfileSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *ProfileFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOProfileFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_role_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *RoleFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*RoleSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalORoleSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *RoleFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_userAPIKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *UserAPIKeyFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOUserAPIKeyFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_userAPIKeys_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*UserAPIKeySortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOUserAPIKeySortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeySortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *UserAPIKeyFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOUserAPIKeyFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg1
	var arg2 *UserFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*UserSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOUserSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *UserFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Role_childrenConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*RoleSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalORoleSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *RoleFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Role_parentsConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*RoleSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalORoleSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *RoleFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Role_permissionsConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PermissionSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPermissionSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PermissionFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_Role_usersConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*UserSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOUserSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *UserFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_UserAPIKey_permissionsConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PermissionSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPermissionSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PermissionFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_User_apikeysConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*UserAPIKeySortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOUserAPIKeySortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeySortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *UserAPIKeyFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOUserAPIKeyFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_User_permissionsConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*PermissionSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOPermissionSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *PermissionFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_User_profilesConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*ProfileSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOProfileSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *ProfileFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOProfileFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field_User_rolesConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg2
	var arg3 []*RoleSortType
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalORoleSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *RoleFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllUsers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUserAPIKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUserAPIKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserAPIKey(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserAPIKey)
	fc.Result = res
	return ec.marshalNUserAPIKey2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserAPIKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserAPIKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserAPIKey(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserAPIKey)
	fc.Result = res
	return ec.marshalNUserAPIKey2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUserAPIKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUserAPIKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserAPIKey(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserAPIKey)
	fc.Result = res
	return ec.marshalNUserAPIKey2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllUserAPIKeys(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllUserAPIKeys(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProfile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProfile(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Profile)
	fc.Result = res
	return ec.marshalNProfile2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProfile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProfile(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Profile)
	fc.Result = res
	return ec.marshalNProfile2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProfile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProfile(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Profile)
	fc.Result = res
	return ec.marshalNProfile2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllProfiles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllProfiles(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRole(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Role)
	fc.Result = res
	return ec.marshalNRole2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRole(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Role)
	fc.Result = res
	return ec.marshalNRole2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRole(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Role)
	fc.Result = res
	return ec.marshalNRole2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllRoles(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePermission(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePermission(rctx, args["id"].(string), args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePermission(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAllPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllPermissions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_id(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_domain(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_tag(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_description(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_users(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Permission().Users(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_roles(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Permission().Roles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_apikeys(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Permission().Apikeys(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*UserAPIKey)
	fc.Result = res
	return ec.marshalNUserAPIKey2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_createdAt(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_updatedBy(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_createdBy(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_usersIds(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Permission().UsersIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_usersConnection(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Permission_usersConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Permission().UsersConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserSortType), args["filter"].(*UserFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserResultType)
	fc.Result = res
	return ec.marshalNUserResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_rolesIds(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Permission().RolesIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_rolesConnection(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Permission_rolesConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Permission().RolesConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RoleResultType)
	fc.Result = res
	return ec.marshalNRoleResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_apikeysIds(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Permission().ApikeysIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_apikeysConnection(ctx context.Context, field graphql.CollectedField, obj *Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Permission_apikeysConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Permission().ApikeysConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserAPIKeySortType), args["filter"].(*UserAPIKeyFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserAPIKeyResultType)
	fc.Result = res
	return ec.marshalNUserAPIKeyResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionResultType_items(ctx context.Context, field graphql.CollectedField, obj *PermissionResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PermissionResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PermissionResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionResultType_count(ctx context.Context, field graphql.CollectedField, obj *PermissionResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PermissionResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PermissionResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_id(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_email(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_externalUserId(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_provider(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_avatarURL(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_name(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_firstName(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_lastName(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_nickName(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NickName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_description(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_location(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_users(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Profile().Users(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_createdAt(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_updatedBy(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_createdBy(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_usersIds(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Profile().UsersIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Profile_usersConnection(ctx context.Context, field graphql.CollectedField, obj *Profile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Profile",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Profile_usersConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Profile().UsersConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserSortType), args["filter"].(*UserFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserResultType)
	fc.Result = res
	return ec.marshalNUserResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileResultType_items(ctx context.Context, field graphql.CollectedField, obj *ProfileResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProfileResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProfileResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Profile)
	fc.Result = res
	return ec.marshalNProfile2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileResultType_count(ctx context.Context, field graphql.CollectedField, obj *ProfileResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProfileResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProfileResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*UserFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_users_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserSortType), args["filter"].(*UserFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserResultType)
	fc.Result = res
	return ec.marshalNUserResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userAPIKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userAPIKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserAPIKey(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*UserAPIKeyFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*UserAPIKey)
	fc.Result = res
	return ec.marshalOUserAPIKey2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userAPIKeys(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userAPIKeys_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserAPIKeys(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserAPIKeySortType), args["filter"].(*UserAPIKeyFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserAPIKeyResultType)
	fc.Result = res
	return ec.marshalNUserAPIKeyResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_profile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_profile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Profile(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*ProfileFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Profile)
	fc.Result = res
	return ec.marshalOProfile2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_profiles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_profiles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Profiles(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*ProfileSortType), args["filter"].(*ProfileFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ProfileResultType)
	fc.Result = res
	return ec.marshalNProfileResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_role(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_role_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Role(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*RoleFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Role)
	fc.Result = res
	return ec.marshalORole2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_roles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_roles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Roles(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RoleResultType)
	fc.Result = res
	return ec.marshalNRoleResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_permission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_permission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Permission(rctx, args["id"].(*string), args["q"].(*string), args["filter"].(*PermissionFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Permission)
	fc.Result = res
	return ec.marshalOPermission2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_permissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_permissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Permissions(rctx, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PermissionSortType), args["filter"].(*PermissionFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PermissionResultType)
	fc.Result = res
	return ec.marshalNPermissionResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_id(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_domain(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_name(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_description(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_users(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().Users(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_parents(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().Parents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_children(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_permissions(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().Permissions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_createdAt(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_updatedBy(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_createdBy(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_usersIds(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().UsersIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_usersConnection(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Role_usersConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().UsersConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserSortType), args["filter"].(*UserFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserResultType)
	fc.Result = res
	return ec.marshalNUserResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_parentsIds(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().ParentsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_parentsConnection(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Role_parentsConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().ParentsConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RoleResultType)
	fc.Result = res
	return ec.marshalNRoleResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_childrenIds(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().ChildrenIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_childrenConnection(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Role_childrenConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().ChildrenConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RoleResultType)
	fc.Result = res
	return ec.marshalNRoleResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_permissionsIds(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().PermissionsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_permissionsConnection(ctx context.Context, field graphql.CollectedField, obj *Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Role_permissionsConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().PermissionsConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PermissionSortType), args["filter"].(*PermissionFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PermissionResultType)
	fc.Result = res
	return ec.marshalNPermissionResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleResultType_items(ctx context.Context, field graphql.CollectedField, obj *RoleResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RoleResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleResultType_count(ctx context.Context, field graphql.CollectedField, obj *RoleResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RoleResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RoleResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_active(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_password(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_avatarURL(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_displayName(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_description(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_nickName(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NickName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_location(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_apikeys(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Apikeys(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*UserAPIKey)
	fc.Result = res
	return ec.marshalNUserAPIKey2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_roles(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Roles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_profiles(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Profiles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Profile)
	fc.Result = res
	return ec.marshalNProfile2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_permissions(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Permissions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_updatedBy(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdBy(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_apikeysIds(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().ApikeysIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_apikeysConnection(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_apikeysConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().ApikeysConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*UserAPIKeySortType), args["filter"].(*UserAPIKeyFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserAPIKeyResultType)
	fc.Result = res
	return ec.marshalNUserAPIKeyResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _User_rolesIds(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().RolesIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_rolesConnection(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_rolesConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().RolesConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*RoleSortType), args["filter"].(*RoleFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RoleResultType)
	fc.Result = res
	return ec.marshalNRoleResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _User_profilesIds(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().ProfilesIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_profilesConnection(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_profilesConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().ProfilesConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*ProfileSortType), args["filter"].(*ProfileFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ProfileResultType)
	fc.Result = res
	return ec.marshalNProfileResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _User_permissionsIds(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().PermissionsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_permissionsConnection(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_permissionsConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().PermissionsConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PermissionSortType), args["filter"].(*PermissionFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PermissionResultType)
	fc.Result = res
	return ec.marshalNPermissionResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_id(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_key(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_description(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_user(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserAPIKey().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_permissions(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserAPIKey().Permissions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_userId(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_updatedAt(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_createdAt(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_updatedBy(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_createdBy(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_permissionsIds(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserAPIKey().PermissionsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKey_permissionsConnection(ctx context.Context, field graphql.CollectedField, obj *UserAPIKey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKey",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserAPIKey_permissionsConnection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserAPIKey().PermissionsConnection(rctx, obj, args["offset"].(*int), args["limit"].(*int), args["q"].(*string), args["sort"].([]*PermissionSortType), args["filter"].(*PermissionFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PermissionResultType)
	fc.Result = res
	return ec.marshalNPermissionResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKeyResultType_items(ctx context.Context, field graphql.CollectedField, obj *UserAPIKeyResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKeyResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserAPIKeyResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*UserAPIKey)
	fc.Result = res
	return ec.marshalNUserAPIKey2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAPIKeyResultType_count(ctx context.Context, field graphql.CollectedField, obj *UserAPIKeyResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAPIKeyResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserAPIKeyResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _UserResultType_items(ctx context.Context, field graphql.CollectedField, obj *UserResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserResultType().Items(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserResultType_count(ctx context.Context, field graphql.CollectedField, obj *UserResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserResultType().Count(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputPermissionFilterType(ctx context.Context, obj interface{}) (PermissionFilterType, error) {
	var it PermissionFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOPermissionFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOPermissionFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain"))
			it.Domain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin"))
			it.DomainMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax"))
			it.DomainMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_ne"))
			it.DomainNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_ne"))
			it.DomainMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_ne"))
			it.DomainMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_gt"))
			it.DomainGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_gt"))
			it.DomainMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_gt"))
			it.DomainMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_lt"))
			it.DomainLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_lt"))
			it.DomainMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_lt"))
			it.DomainMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_gte"))
			it.DomainGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_gte"))
			it.DomainMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_gte"))
			it.DomainMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_lte"))
			it.DomainLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_lte"))
			it.DomainMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_lte"))
			it.DomainMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_in"))
			it.DomainIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_in"))
			it.DomainMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_in"))
			it.DomainMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_not_in"))
			it.DomainNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_not_in"))
			it.DomainMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_not_in"))
			it.DomainMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_like"))
			it.DomainLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_like"))
			it.DomainMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_like"))
			it.DomainMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_prefix"))
			it.DomainPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_prefix"))
			it.DomainMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_prefix"))
			it.DomainMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_suffix"))
			it.DomainSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_suffix"))
			it.DomainMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_suffix"))
			it.DomainMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_null"))
			it.DomainNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin"))
			it.TagMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax"))
			it.TagMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ne"))
			it.TagNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_ne"))
			it.TagMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_ne"))
			it.TagMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_gt"))
			it.TagGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_gt"))
			it.TagMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_gt"))
			it.TagMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_lt"))
			it.TagLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_lt"))
			it.TagMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_lt"))
			it.TagMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_gte"))
			it.TagGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_gte"))
			it.TagMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_gte"))
			it.TagMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_lte"))
			it.TagLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_lte"))
			it.TagMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_lte"))
			it.TagMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_in"))
			it.TagIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_in"))
			it.TagMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_in"))
			it.TagMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_not_in"))
			it.TagNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_not_in"))
			it.TagMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_not_in"))
			it.TagMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_like"))
			it.TagLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_like"))
			it.TagMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_like"))
			it.TagMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_prefix"))
			it.TagPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_prefix"))
			it.TagMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_prefix"))
			it.TagMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_suffix"))
			it.TagSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin_suffix"))
			it.TagMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax_suffix"))
			it.TagMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_null"))
			it.TagNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("users"))
			it.Users, err = ec.unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			it.Roles, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeys":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeys"))
			it.Apikeys, err = ec.unmarshalOUserAPIKeyFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPermissionSortType(ctx context.Context, obj interface{}) (PermissionSortType, error) {
	var it PermissionSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain"))
			it.Domain, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin"))
			it.DomainMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax"))
			it.DomainMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMin"))
			it.TagMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "tagMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagMax"))
			it.TagMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "usersIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usersIds"))
			it.UsersIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "usersIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usersIdsMin"))
			it.UsersIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "usersIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usersIdsMax"))
			it.UsersIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "rolesIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rolesIds"))
			it.RolesIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "rolesIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rolesIdsMin"))
			it.RolesIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "rolesIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rolesIdsMax"))
			it.RolesIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeysIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeysIds"))
			it.ApikeysIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeysIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeysIdsMin"))
			it.ApikeysIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeysIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeysIdsMax"))
			it.ApikeysIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("users"))
			it.Users, err = ec.unmarshalOUserSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			it.Roles, err = ec.unmarshalORoleSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeys":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeys"))
			it.Apikeys, err = ec.unmarshalOUserAPIKeySortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeySortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProfileFilterType(ctx context.Context, obj interface{}) (ProfileFilterType, error) {
	var it ProfileFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOProfileFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOProfileFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin"))
			it.EmailMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax"))
			it.EmailMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ne"))
			it.EmailNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_ne"))
			it.EmailMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_ne"))
			it.EmailMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_gt"))
			it.EmailGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_gt"))
			it.EmailMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_gt"))
			it.EmailMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_lt"))
			it.EmailLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_lt"))
			it.EmailMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_lt"))
			it.EmailMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_gte"))
			it.EmailGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_gte"))
			it.EmailMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_gte"))
			it.EmailMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_lte"))
			it.EmailLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_lte"))
			it.EmailMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_lte"))
			it.EmailMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_in"))
			it.EmailIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_in"))
			it.EmailMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_in"))
			it.EmailMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_in"))
			it.EmailNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_not_in"))
			it.EmailMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_not_in"))
			it.EmailMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_like"))
			it.EmailLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_like"))
			it.EmailMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_like"))
			it.EmailMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_prefix"))
			it.EmailPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_prefix"))
			it.EmailMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_prefix"))
			it.EmailMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_suffix"))
			it.EmailSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_suffix"))
			it.EmailMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_suffix"))
			it.EmailMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_null"))
			it.EmailNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId"))
			it.ExternalUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin"))
			it.ExternalUserIDMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax"))
			it.ExternalUserIDMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_ne"))
			it.ExternalUserIDNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_ne"))
			it.ExternalUserIDMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_ne"))
			it.ExternalUserIDMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_gt"))
			it.ExternalUserIDGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_gt"))
			it.ExternalUserIDMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_gt"))
			it.ExternalUserIDMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_lt"))
			it.ExternalUserIDLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_lt"))
			it.ExternalUserIDMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_lt"))
			it.ExternalUserIDMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_gte"))
			it.ExternalUserIDGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_gte"))
			it.ExternalUserIDMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_gte"))
			it.ExternalUserIDMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_lte"))
			it.ExternalUserIDLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_lte"))
			it.ExternalUserIDMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_lte"))
			it.ExternalUserIDMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_in"))
			it.ExternalUserIDIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_in"))
			it.ExternalUserIDMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_in"))
			it.ExternalUserIDMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_not_in"))
			it.ExternalUserIDNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_not_in"))
			it.ExternalUserIDMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_not_in"))
			it.ExternalUserIDMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_like"))
			it.ExternalUserIDLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_like"))
			it.ExternalUserIDMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_like"))
			it.ExternalUserIDMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_prefix"))
			it.ExternalUserIDPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_prefix"))
			it.ExternalUserIDMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_prefix"))
			it.ExternalUserIDMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_suffix"))
			it.ExternalUserIDSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin_suffix"))
			it.ExternalUserIDMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax_suffix"))
			it.ExternalUserIDMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId_null"))
			it.ExternalUserIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			it.Provider, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin"))
			it.ProviderMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax"))
			it.ProviderMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_ne"))
			it.ProviderNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_ne"))
			it.ProviderMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_ne"))
			it.ProviderMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_gt"))
			it.ProviderGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_gt"))
			it.ProviderMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_gt"))
			it.ProviderMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_lt"))
			it.ProviderLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_lt"))
			it.ProviderMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_lt"))
			it.ProviderMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_gte"))
			it.ProviderGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_gte"))
			it.ProviderMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_gte"))
			it.ProviderMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_lte"))
			it.ProviderLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_lte"))
			it.ProviderMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_lte"))
			it.ProviderMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_in"))
			it.ProviderIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_in"))
			it.ProviderMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_in"))
			it.ProviderMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_not_in"))
			it.ProviderNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_not_in"))
			it.ProviderMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_not_in"))
			it.ProviderMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_like"))
			it.ProviderLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_like"))
			it.ProviderMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_like"))
			it.ProviderMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_prefix"))
			it.ProviderPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_prefix"))
			it.ProviderMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_prefix"))
			it.ProviderMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_suffix"))
			it.ProviderSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin_suffix"))
			it.ProviderMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax_suffix"))
			it.ProviderMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider_null"))
			it.ProviderNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			it.AvatarURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin"))
			it.AvatarURLMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax"))
			it.AvatarURLMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_ne"))
			it.AvatarURLNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_ne"))
			it.AvatarURLMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_ne"))
			it.AvatarURLMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_gt"))
			it.AvatarURLGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_gt"))
			it.AvatarURLMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_gt"))
			it.AvatarURLMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_lt"))
			it.AvatarURLLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_lt"))
			it.AvatarURLMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_lt"))
			it.AvatarURLMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_gte"))
			it.AvatarURLGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_gte"))
			it.AvatarURLMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_gte"))
			it.AvatarURLMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_lte"))
			it.AvatarURLLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_lte"))
			it.AvatarURLMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_lte"))
			it.AvatarURLMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_in"))
			it.AvatarURLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_in"))
			it.AvatarURLMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_in"))
			it.AvatarURLMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_not_in"))
			it.AvatarURLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_not_in"))
			it.AvatarURLMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_not_in"))
			it.AvatarURLMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_like"))
			it.AvatarURLLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_like"))
			it.AvatarURLMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_like"))
			it.AvatarURLMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_prefix"))
			it.AvatarURLPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_prefix"))
			it.AvatarURLMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_prefix"))
			it.AvatarURLMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_suffix"))
			it.AvatarURLSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_suffix"))
			it.AvatarURLMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_suffix"))
			it.AvatarURLMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_null"))
			it.AvatarURLNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_not_in"))
			it.NameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_not_in"))
			it.NameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin"))
			it.FirstNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax"))
			it.FirstNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_ne"))
			it.FirstNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_ne"))
			it.FirstNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_ne"))
			it.FirstNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_gt"))
			it.FirstNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_gt"))
			it.FirstNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_gt"))
			it.FirstNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_lt"))
			it.FirstNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_lt"))
			it.FirstNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_lt"))
			it.FirstNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_gte"))
			it.FirstNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_gte"))
			it.FirstNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_gte"))
			it.FirstNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_lte"))
			it.FirstNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_lte"))
			it.FirstNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_lte"))
			it.FirstNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_in"))
			it.FirstNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_in"))
			it.FirstNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_in"))
			it.FirstNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_in"))
			it.FirstNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_not_in"))
			it.FirstNameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_not_in"))
			it.FirstNameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_like"))
			it.FirstNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_like"))
			it.FirstNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_like"))
			it.FirstNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_prefix"))
			it.FirstNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_prefix"))
			it.FirstNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_prefix"))
			it.FirstNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_suffix"))
			it.FirstNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_suffix"))
			it.FirstNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_suffix"))
			it.FirstNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_null"))
			it.FirstNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin"))
			it.LastNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax"))
			it.LastNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_ne"))
			it.LastNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_ne"))
			it.LastNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_ne"))
			it.LastNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_gt"))
			it.LastNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_gt"))
			it.LastNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_gt"))
			it.LastNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_lt"))
			it.LastNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_lt"))
			it.LastNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_lt"))
			it.LastNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_gte"))
			it.LastNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_gte"))
			it.LastNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_gte"))
			it.LastNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_lte"))
			it.LastNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_lte"))
			it.LastNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_lte"))
			it.LastNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_in"))
			it.LastNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_in"))
			it.LastNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_in"))
			it.LastNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_in"))
			it.LastNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_not_in"))
			it.LastNameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_not_in"))
			it.LastNameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_like"))
			it.LastNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_like"))
			it.LastNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_like"))
			it.LastNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_prefix"))
			it.LastNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_prefix"))
			it.LastNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_prefix"))
			it.LastNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_suffix"))
			it.LastNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_suffix"))
			it.LastNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_suffix"))
			it.LastNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_null"))
			it.LastNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName"))
			it.NickName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin"))
			it.NickNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax"))
			it.NickNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_ne"))
			it.NickNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_ne"))
			it.NickNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_ne"))
			it.NickNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_gt"))
			it.NickNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_gt"))
			it.NickNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_gt"))
			it.NickNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_lt"))
			it.NickNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_lt"))
			it.NickNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_lt"))
			it.NickNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_gte"))
			it.NickNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_gte"))
			it.NickNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_gte"))
			it.NickNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_lte"))
			it.NickNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_lte"))
			it.NickNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_lte"))
			it.NickNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_in"))
			it.NickNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_in"))
			it.NickNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_in"))
			it.NickNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_not_in"))
			it.NickNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_not_in"))
			it.NickNameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_not_in"))
			it.NickNameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_like"))
			it.NickNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_like"))
			it.NickNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_like"))
			it.NickNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_prefix"))
			it.NickNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_prefix"))
			it.NickNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_prefix"))
			it.NickNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_suffix"))
			it.NickNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_suffix"))
			it.NickNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_suffix"))
			it.NickNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_null"))
			it.NickNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin"))
			it.LocationMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax"))
			it.LocationMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_ne"))
			it.LocationNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_ne"))
			it.LocationMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_ne"))
			it.LocationMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_gt"))
			it.LocationGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_gt"))
			it.LocationMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_gt"))
			it.LocationMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_lt"))
			it.LocationLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_lt"))
			it.LocationMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_lt"))
			it.LocationMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_gte"))
			it.LocationGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_gte"))
			it.LocationMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_gte"))
			it.LocationMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_lte"))
			it.LocationLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_lte"))
			it.LocationMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_lte"))
			it.LocationMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_in"))
			it.LocationIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_in"))
			it.LocationMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_in"))
			it.LocationMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_not_in"))
			it.LocationNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_not_in"))
			it.LocationMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_not_in"))
			it.LocationMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_like"))
			it.LocationLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_like"))
			it.LocationMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_like"))
			it.LocationMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_prefix"))
			it.LocationPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_prefix"))
			it.LocationMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_prefix"))
			it.LocationMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_suffix"))
			it.LocationSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_suffix"))
			it.LocationMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_suffix"))
			it.LocationMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_null"))
			it.LocationNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("users"))
			it.Users, err = ec.unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProfileSortType(ctx context.Context, obj interface{}) (ProfileSortType, error) {
	var it ProfileSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin"))
			it.EmailMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax"))
			it.EmailMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserId"))
			it.ExternalUserID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMin"))
			it.ExternalUserIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalUserIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUserIdMax"))
			it.ExternalUserIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "provider":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			it.Provider, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMin"))
			it.ProviderMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerMax"))
			it.ProviderMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			it.AvatarURL, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin"))
			it.AvatarURLMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax"))
			it.AvatarURLMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin"))
			it.FirstNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax"))
			it.FirstNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin"))
			it.LastNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax"))
			it.LastNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName"))
			it.NickName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin"))
			it.NickNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax"))
			it.NickNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin"))
			it.LocationMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax"))
			it.LocationMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "usersIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usersIds"))
			it.UsersIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "usersIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usersIdsMin"))
			it.UsersIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "usersIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usersIdsMax"))
			it.UsersIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("users"))
			it.Users, err = ec.unmarshalOUserSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleFilterType(ctx context.Context, obj interface{}) (RoleFilterType, error) {
	var it RoleFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalORoleFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalORoleFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain"))
			it.Domain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin"))
			it.DomainMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax"))
			it.DomainMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_ne"))
			it.DomainNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_ne"))
			it.DomainMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_ne"))
			it.DomainMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_gt"))
			it.DomainGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_gt"))
			it.DomainMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_gt"))
			it.DomainMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_lt"))
			it.DomainLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_lt"))
			it.DomainMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_lt"))
			it.DomainMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_gte"))
			it.DomainGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_gte"))
			it.DomainMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_gte"))
			it.DomainMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_lte"))
			it.DomainLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_lte"))
			it.DomainMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_lte"))
			it.DomainMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_in"))
			it.DomainIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_in"))
			it.DomainMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_in"))
			it.DomainMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_not_in"))
			it.DomainNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_not_in"))
			it.DomainMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_not_in"))
			it.DomainMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_like"))
			it.DomainLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_like"))
			it.DomainMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_like"))
			it.DomainMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_prefix"))
			it.DomainPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_prefix"))
			it.DomainMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_prefix"))
			it.DomainMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_suffix"))
			it.DomainSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin_suffix"))
			it.DomainMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax_suffix"))
			it.DomainMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain_null"))
			it.DomainNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_ne"))
			it.NameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_ne"))
			it.NameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_ne"))
			it.NameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gt"))
			it.NameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gt"))
			it.NameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gt"))
			it.NameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lt"))
			it.NameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lt"))
			it.NameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lt"))
			it.NameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_gte"))
			it.NameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_gte"))
			it.NameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_gte"))
			it.NameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_lte"))
			it.NameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_lte"))
			it.NameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_lte"))
			it.NameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_in"))
			it.NameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_in"))
			it.NameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_in"))
			it.NameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_not_in"))
			it.NameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_not_in"))
			it.NameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_not_in"))
			it.NameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_like"))
			it.NameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_like"))
			it.NameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_prefix"))
			it.NamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_prefix"))
			it.NameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_prefix"))
			it.NameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_suffix"))
			it.NameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin_suffix"))
			it.NameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax_suffix"))
			it.NameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_null"))
			it.NameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("users"))
			it.Users, err = ec.unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "parents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parents"))
			it.Parents, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("children"))
			it.Children, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			it.Permissions, err = ec.unmarshalOPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleSortType(ctx context.Context, obj interface{}) (RoleSortType, error) {
	var it RoleSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain"))
			it.Domain, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMin"))
			it.DomainMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainMax"))
			it.DomainMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMin"))
			it.NameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMax"))
			it.NameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "usersIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usersIds"))
			it.UsersIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "usersIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usersIdsMin"))
			it.UsersIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "usersIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usersIdsMax"))
			it.UsersIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentsIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentsIds"))
			it.ParentsIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentsIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentsIdsMin"))
			it.ParentsIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentsIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentsIdsMax"))
			it.ParentsIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "childrenIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("childrenIds"))
			it.ChildrenIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "childrenIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("childrenIdsMin"))
			it.ChildrenIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "childrenIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("childrenIdsMax"))
			it.ChildrenIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionsIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissionsIds"))
			it.PermissionsIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionsIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissionsIdsMin"))
			it.PermissionsIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionsIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissionsIdsMax"))
			it.PermissionsIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("users"))
			it.Users, err = ec.unmarshalOUserSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "parents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parents"))
			it.Parents, err = ec.unmarshalORoleSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("children"))
			it.Children, err = ec.unmarshalORoleSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			it.Permissions, err = ec.unmarshalOPermissionSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserAPIKeyFilterType(ctx context.Context, obj interface{}) (UserAPIKeyFilterType, error) {
	var it UserAPIKeyFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOUserAPIKeyFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOUserAPIKeyFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin"))
			it.KeyMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax"))
			it.KeyMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_ne"))
			it.KeyNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_ne"))
			it.KeyMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_ne"))
			it.KeyMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_gt"))
			it.KeyGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_gt"))
			it.KeyMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_gt"))
			it.KeyMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_lt"))
			it.KeyLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_lt"))
			it.KeyMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_lt"))
			it.KeyMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_gte"))
			it.KeyGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_gte"))
			it.KeyMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_gte"))
			it.KeyMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_lte"))
			it.KeyLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_lte"))
			it.KeyMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_lte"))
			it.KeyMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_in"))
			it.KeyIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_in"))
			it.KeyMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_in"))
			it.KeyMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_not_in"))
			it.KeyNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_not_in"))
			it.KeyMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_not_in"))
			it.KeyMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_like"))
			it.KeyLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_like"))
			it.KeyMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_like"))
			it.KeyMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_prefix"))
			it.KeyPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_prefix"))
			it.KeyMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_prefix"))
			it.KeyMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_suffix"))
			it.KeySuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin_suffix"))
			it.KeyMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax_suffix"))
			it.KeyMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key_null"))
			it.KeyNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin"))
			it.UserIDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax"))
			it.UserIDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_ne"))
			it.UserIDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_ne"))
			it.UserIDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_ne"))
			it.UserIDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_gt"))
			it.UserIDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_gt"))
			it.UserIDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_gt"))
			it.UserIDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_lt"))
			it.UserIDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_lt"))
			it.UserIDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_lt"))
			it.UserIDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_gte"))
			it.UserIDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_gte"))
			it.UserIDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_gte"))
			it.UserIDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_lte"))
			it.UserIDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_lte"))
			it.UserIDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_lte"))
			it.UserIDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_in"))
			it.UserIDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_in"))
			it.UserIDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_in"))
			it.UserIDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_not_in"))
			it.UserIDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin_not_in"))
			it.UserIDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax_not_in"))
			it.UserIDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId_null"))
			it.UserIDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			it.User, err = ec.unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			it.Permissions, err = ec.unmarshalOPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserAPIKeySortType(ctx context.Context, obj interface{}) (UserAPIKeySortType, error) {
	var it UserAPIKeySortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMin"))
			it.KeyMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyMax"))
			it.KeyMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMin"))
			it.UserIDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userIdMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdMax"))
			it.UserIDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionsIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissionsIds"))
			it.PermissionsIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionsIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissionsIdsMin"))
			it.PermissionsIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionsIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissionsIdsMax"))
			it.PermissionsIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			it.User, err = ec.unmarshalOUserSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			it.Permissions, err = ec.unmarshalOPermissionSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilterType(ctx context.Context, obj interface{}) (UserFilterType, error) {
	var it UserFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOUserFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOUserFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_ne"))
			it.IDNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_ne"))
			it.IDMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_ne"))
			it.IDMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gt"))
			it.IDGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gt"))
			it.IDMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gt"))
			it.IDMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lt"))
			it.IDLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lt"))
			it.IDMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lt"))
			it.IDMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_gte"))
			it.IDGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_gte"))
			it.IDMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_gte"))
			it.IDMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_lte"))
			it.IDLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_lte"))
			it.IDMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_lte"))
			it.IDMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_in"))
			it.IDIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_in"))
			it.IDMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_in"))
			it.IDMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_not_in"))
			it.IDNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin_not_in"))
			it.IDMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax_not_in"))
			it.IDMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_null"))
			it.IDNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMin"))
			it.ActiveMin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMax"))
			it.ActiveMax, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "active_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active_ne"))
			it.ActiveNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMin_ne"))
			it.ActiveMinNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMax_ne"))
			it.ActiveMaxNe, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "active_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active_gt"))
			it.ActiveGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMin_gt"))
			it.ActiveMinGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMax_gt"))
			it.ActiveMaxGt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "active_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active_lt"))
			it.ActiveLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMin_lt"))
			it.ActiveMinLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMax_lt"))
			it.ActiveMaxLt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "active_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active_gte"))
			it.ActiveGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMin_gte"))
			it.ActiveMinGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMax_gte"))
			it.ActiveMaxGte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "active_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active_lte"))
			it.ActiveLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMin_lte"))
			it.ActiveMinLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMax_lte"))
			it.ActiveMaxLte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "active_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active_in"))
			it.ActiveIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMin_in"))
			it.ActiveMinIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMax_in"))
			it.ActiveMaxIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "active_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active_not_in"))
			it.ActiveNotIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMin_not_in"))
			it.ActiveMinNotIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMax_not_in"))
			it.ActiveMaxNotIn, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "active_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active_null"))
			it.ActiveNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin"))
			it.EmailMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax"))
			it.EmailMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_ne"))
			it.EmailNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_ne"))
			it.EmailMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_ne"))
			it.EmailMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_gt"))
			it.EmailGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_gt"))
			it.EmailMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_gt"))
			it.EmailMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_lt"))
			it.EmailLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_lt"))
			it.EmailMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_lt"))
			it.EmailMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_gte"))
			it.EmailGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_gte"))
			it.EmailMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_gte"))
			it.EmailMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_lte"))
			it.EmailLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_lte"))
			it.EmailMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_lte"))
			it.EmailMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_in"))
			it.EmailIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_in"))
			it.EmailMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_in"))
			it.EmailMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_not_in"))
			it.EmailNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_not_in"))
			it.EmailMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_not_in"))
			it.EmailMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_like"))
			it.EmailLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_like"))
			it.EmailMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_like"))
			it.EmailMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_prefix"))
			it.EmailPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_prefix"))
			it.EmailMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_prefix"))
			it.EmailMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_suffix"))
			it.EmailSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin_suffix"))
			it.EmailMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax_suffix"))
			it.EmailMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email_null"))
			it.EmailNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin"))
			it.PasswordMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax"))
			it.PasswordMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_ne"))
			it.PasswordNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_ne"))
			it.PasswordMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_ne"))
			it.PasswordMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_gt"))
			it.PasswordGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_gt"))
			it.PasswordMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_gt"))
			it.PasswordMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_lt"))
			it.PasswordLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_lt"))
			it.PasswordMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_lt"))
			it.PasswordMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_gte"))
			it.PasswordGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_gte"))
			it.PasswordMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_gte"))
			it.PasswordMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_lte"))
			it.PasswordLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_lte"))
			it.PasswordMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_lte"))
			it.PasswordMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_in"))
			it.PasswordIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_in"))
			it.PasswordMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_in"))
			it.PasswordMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_not_in"))
			it.PasswordNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_not_in"))
			it.PasswordMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_not_in"))
			it.PasswordMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_like"))
			it.PasswordLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_like"))
			it.PasswordMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_like"))
			it.PasswordMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_prefix"))
			it.PasswordPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_prefix"))
			it.PasswordMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_prefix"))
			it.PasswordMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_suffix"))
			it.PasswordSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin_suffix"))
			it.PasswordMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax_suffix"))
			it.PasswordMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password_null"))
			it.PasswordNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			it.AvatarURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin"))
			it.AvatarURLMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax"))
			it.AvatarURLMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_ne"))
			it.AvatarURLNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_ne"))
			it.AvatarURLMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_ne"))
			it.AvatarURLMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_gt"))
			it.AvatarURLGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_gt"))
			it.AvatarURLMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_gt"))
			it.AvatarURLMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_lt"))
			it.AvatarURLLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_lt"))
			it.AvatarURLMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_lt"))
			it.AvatarURLMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_gte"))
			it.AvatarURLGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_gte"))
			it.AvatarURLMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_gte"))
			it.AvatarURLMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_lte"))
			it.AvatarURLLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_lte"))
			it.AvatarURLMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_lte"))
			it.AvatarURLMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_in"))
			it.AvatarURLIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_in"))
			it.AvatarURLMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_in"))
			it.AvatarURLMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_not_in"))
			it.AvatarURLNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_not_in"))
			it.AvatarURLMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_not_in"))
			it.AvatarURLMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_like"))
			it.AvatarURLLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_like"))
			it.AvatarURLMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_like"))
			it.AvatarURLMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_prefix"))
			it.AvatarURLPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_prefix"))
			it.AvatarURLMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_prefix"))
			it.AvatarURLMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_suffix"))
			it.AvatarURLSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin_suffix"))
			it.AvatarURLMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax_suffix"))
			it.AvatarURLMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL_null"))
			it.AvatarURLNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin"))
			it.DisplayNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax"))
			it.DisplayNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_ne"))
			it.DisplayNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_ne"))
			it.DisplayNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_ne"))
			it.DisplayNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_gt"))
			it.DisplayNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_gt"))
			it.DisplayNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_gt"))
			it.DisplayNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_lt"))
			it.DisplayNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_lt"))
			it.DisplayNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_lt"))
			it.DisplayNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_gte"))
			it.DisplayNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_gte"))
			it.DisplayNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_gte"))
			it.DisplayNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_lte"))
			it.DisplayNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_lte"))
			it.DisplayNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_lte"))
			it.DisplayNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_in"))
			it.DisplayNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_in"))
			it.DisplayNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_in"))
			it.DisplayNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_not_in"))
			it.DisplayNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_not_in"))
			it.DisplayNameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_not_in"))
			it.DisplayNameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_like"))
			it.DisplayNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_like"))
			it.DisplayNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_like"))
			it.DisplayNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_prefix"))
			it.DisplayNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_prefix"))
			it.DisplayNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_prefix"))
			it.DisplayNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_suffix"))
			it.DisplayNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin_suffix"))
			it.DisplayNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax_suffix"))
			it.DisplayNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName_null"))
			it.DisplayNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_ne"))
			it.DescriptionNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_ne"))
			it.DescriptionMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_ne"))
			it.DescriptionMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gt"))
			it.DescriptionGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gt"))
			it.DescriptionMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gt"))
			it.DescriptionMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lt"))
			it.DescriptionLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lt"))
			it.DescriptionMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lt"))
			it.DescriptionMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_gte"))
			it.DescriptionGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_gte"))
			it.DescriptionMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_gte"))
			it.DescriptionMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_lte"))
			it.DescriptionLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_lte"))
			it.DescriptionMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_lte"))
			it.DescriptionMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_in"))
			it.DescriptionIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_in"))
			it.DescriptionMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_in"))
			it.DescriptionMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_not_in"))
			it.DescriptionNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_not_in"))
			it.DescriptionMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_not_in"))
			it.DescriptionMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_like"))
			it.DescriptionLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_like"))
			it.DescriptionMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_like"))
			it.DescriptionMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_prefix"))
			it.DescriptionPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_prefix"))
			it.DescriptionMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_prefix"))
			it.DescriptionMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_suffix"))
			it.DescriptionSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin_suffix"))
			it.DescriptionMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax_suffix"))
			it.DescriptionMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description_null"))
			it.DescriptionNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin"))
			it.FirstNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax"))
			it.FirstNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_ne"))
			it.FirstNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_ne"))
			it.FirstNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_ne"))
			it.FirstNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_gt"))
			it.FirstNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_gt"))
			it.FirstNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_gt"))
			it.FirstNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_lt"))
			it.FirstNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_lt"))
			it.FirstNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_lt"))
			it.FirstNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_gte"))
			it.FirstNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_gte"))
			it.FirstNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_gte"))
			it.FirstNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_lte"))
			it.FirstNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_lte"))
			it.FirstNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_lte"))
			it.FirstNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_in"))
			it.FirstNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_in"))
			it.FirstNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_in"))
			it.FirstNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_not_in"))
			it.FirstNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_not_in"))
			it.FirstNameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_not_in"))
			it.FirstNameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_like"))
			it.FirstNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_like"))
			it.FirstNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_like"))
			it.FirstNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_prefix"))
			it.FirstNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_prefix"))
			it.FirstNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_prefix"))
			it.FirstNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_suffix"))
			it.FirstNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin_suffix"))
			it.FirstNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax_suffix"))
			it.FirstNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName_null"))
			it.FirstNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin"))
			it.LastNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax"))
			it.LastNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_ne"))
			it.LastNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_ne"))
			it.LastNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_ne"))
			it.LastNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_gt"))
			it.LastNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_gt"))
			it.LastNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_gt"))
			it.LastNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_lt"))
			it.LastNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_lt"))
			it.LastNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_lt"))
			it.LastNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_gte"))
			it.LastNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_gte"))
			it.LastNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_gte"))
			it.LastNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_lte"))
			it.LastNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_lte"))
			it.LastNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_lte"))
			it.LastNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_in"))
			it.LastNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_in"))
			it.LastNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_in"))
			it.LastNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_not_in"))
			it.LastNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_not_in"))
			it.LastNameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_not_in"))
			it.LastNameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_like"))
			it.LastNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_like"))
			it.LastNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_like"))
			it.LastNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_prefix"))
			it.LastNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_prefix"))
			it.LastNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_prefix"))
			it.LastNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_suffix"))
			it.LastNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin_suffix"))
			it.LastNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax_suffix"))
			it.LastNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName_null"))
			it.LastNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName"))
			it.NickName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin"))
			it.NickNameMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax"))
			it.NickNameMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_ne"))
			it.NickNameNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_ne"))
			it.NickNameMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_ne"))
			it.NickNameMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_gt"))
			it.NickNameGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_gt"))
			it.NickNameMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_gt"))
			it.NickNameMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_lt"))
			it.NickNameLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_lt"))
			it.NickNameMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_lt"))
			it.NickNameMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_gte"))
			it.NickNameGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_gte"))
			it.NickNameMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_gte"))
			it.NickNameMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_lte"))
			it.NickNameLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_lte"))
			it.NickNameMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_lte"))
			it.NickNameMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_in"))
			it.NickNameIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_in"))
			it.NickNameMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_in"))
			it.NickNameMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_not_in"))
			it.NickNameNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_not_in"))
			it.NickNameMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_not_in"))
			it.NickNameMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_like"))
			it.NickNameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_like"))
			it.NickNameMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_like"))
			it.NickNameMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_prefix"))
			it.NickNamePrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_prefix"))
			it.NickNameMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_prefix"))
			it.NickNameMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_suffix"))
			it.NickNameSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin_suffix"))
			it.NickNameMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax_suffix"))
			it.NickNameMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName_null"))
			it.NickNameNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin"))
			it.LocationMin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax"))
			it.LocationMax, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_ne"))
			it.LocationNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_ne"))
			it.LocationMinNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_ne"))
			it.LocationMaxNe, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_gt"))
			it.LocationGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_gt"))
			it.LocationMinGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_gt"))
			it.LocationMaxGt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_lt"))
			it.LocationLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_lt"))
			it.LocationMinLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_lt"))
			it.LocationMaxLt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_gte"))
			it.LocationGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_gte"))
			it.LocationMinGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_gte"))
			it.LocationMaxGte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_lte"))
			it.LocationLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_lte"))
			it.LocationMinLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_lte"))
			it.LocationMaxLte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_in"))
			it.LocationIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_in"))
			it.LocationMinIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_in"))
			it.LocationMaxIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_not_in"))
			it.LocationNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_not_in"))
			it.LocationMinNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_not_in"))
			it.LocationMaxNotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_like"))
			it.LocationLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_like"))
			it.LocationMinLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_like"))
			it.LocationMaxLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_prefix"))
			it.LocationPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_prefix"))
			it.LocationMinPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_prefix"))
			it.LocationMaxPrefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_suffix"))
			it.LocationSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin_suffix"))
			it.LocationMinSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax_suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax_suffix"))
			it.LocationMaxSuffix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_null"))
			it.LocationNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_ne"))
			it.UpdatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_ne"))
			it.UpdatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_ne"))
			it.UpdatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gt"))
			it.UpdatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gt"))
			it.UpdatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gt"))
			it.UpdatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lt"))
			it.UpdatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lt"))
			it.UpdatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lt"))
			it.UpdatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_gte"))
			it.UpdatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_gte"))
			it.UpdatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_gte"))
			it.UpdatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_lte"))
			it.UpdatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_lte"))
			it.UpdatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_lte"))
			it.UpdatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_in"))
			it.UpdatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_in"))
			it.UpdatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_in"))
			it.UpdatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_not_in"))
			it.UpdatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin_not_in"))
			it.UpdatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax_not_in"))
			it.UpdatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt_null"))
			it.UpdatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_ne"))
			it.CreatedAtNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_ne"))
			it.CreatedAtMinNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_ne"))
			it.CreatedAtMaxNe, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gt"))
			it.CreatedAtGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gt"))
			it.CreatedAtMinGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gt"))
			it.CreatedAtMaxGt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lt"))
			it.CreatedAtLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lt"))
			it.CreatedAtMinLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lt"))
			it.CreatedAtMaxLt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_gte"))
			it.CreatedAtGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_gte"))
			it.CreatedAtMinGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_gte"))
			it.CreatedAtMaxGte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_lte"))
			it.CreatedAtLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_lte"))
			it.CreatedAtMinLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_lte"))
			it.CreatedAtMaxLte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_in"))
			it.CreatedAtIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_in"))
			it.CreatedAtMinIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_in"))
			it.CreatedAtMaxIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_not_in"))
			it.CreatedAtNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin_not_in"))
			it.CreatedAtMinNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax_not_in"))
			it.CreatedAtMaxNotIn, err = ec.unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt_null"))
			it.CreatedAtNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_ne"))
			it.UpdatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_ne"))
			it.UpdatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_ne"))
			it.UpdatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gt"))
			it.UpdatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gt"))
			it.UpdatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gt"))
			it.UpdatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lt"))
			it.UpdatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lt"))
			it.UpdatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lt"))
			it.UpdatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_gte"))
			it.UpdatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_gte"))
			it.UpdatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_gte"))
			it.UpdatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_lte"))
			it.UpdatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_lte"))
			it.UpdatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_lte"))
			it.UpdatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_in"))
			it.UpdatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_in"))
			it.UpdatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_in"))
			it.UpdatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_not_in"))
			it.UpdatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin_not_in"))
			it.UpdatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax_not_in"))
			it.UpdatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy_null"))
			it.UpdatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_ne"))
			it.CreatedByNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_ne"))
			it.CreatedByMinNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_ne"))
			it.CreatedByMaxNe, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gt"))
			it.CreatedByGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gt"))
			it.CreatedByMinGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gt"))
			it.CreatedByMaxGt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lt"))
			it.CreatedByLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lt"))
			it.CreatedByMinLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lt"))
			it.CreatedByMaxLt, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_gte"))
			it.CreatedByGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_gte"))
			it.CreatedByMinGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_gte"))
			it.CreatedByMaxGte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_lte"))
			it.CreatedByLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_lte"))
			it.CreatedByMinLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_lte"))
			it.CreatedByMaxLte, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_in"))
			it.CreatedByIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_in"))
			it.CreatedByMinIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_in"))
			it.CreatedByMaxIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_not_in"))
			it.CreatedByNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin_not_in"))
			it.CreatedByMinNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax_not_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax_not_in"))
			it.CreatedByMaxNotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy_null"))
			it.CreatedByNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeys":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeys"))
			it.Apikeys, err = ec.unmarshalOUserAPIKeyFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			it.Roles, err = ec.unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "profiles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profiles"))
			it.Profiles, err = ec.unmarshalOProfileFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			it.Permissions, err = ec.unmarshalOPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserSortType(ctx context.Context, obj interface{}) (UserSortType, error) {
	var it UserSortType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMin"))
			it.IDMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "idMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idMax"))
			it.IDMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			it.Active, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMin"))
			it.ActiveMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeMax"))
			it.ActiveMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMin"))
			it.EmailMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailMax"))
			it.EmailMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMin"))
			it.PasswordMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "passwordMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMax"))
			it.PasswordMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			it.AvatarURL, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMin"))
			it.AvatarURLMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarURLMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLMax"))
			it.AvatarURLMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMin"))
			it.DisplayNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayNameMax"))
			it.DisplayNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMin"))
			it.DescriptionMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionMax"))
			it.DescriptionMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMin"))
			it.FirstNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstNameMax"))
			it.FirstNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMin"))
			it.LastNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastNameMax"))
			it.LastNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName"))
			it.NickName, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMin"))
			it.NickNameMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "nickNameMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickNameMax"))
			it.NickNameMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMin"))
			it.LocationMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationMax"))
			it.LocationMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMin"))
			it.UpdatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtMax"))
			it.UpdatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMin"))
			it.CreatedAtMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAtMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtMax"))
			it.CreatedAtMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedBy"))
			it.UpdatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMin"))
			it.UpdatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByMax"))
			it.UpdatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMin"))
			it.CreatedByMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdByMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByMax"))
			it.CreatedByMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeysIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeysIds"))
			it.ApikeysIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeysIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeysIdsMin"))
			it.ApikeysIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeysIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeysIdsMax"))
			it.ApikeysIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "rolesIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rolesIds"))
			it.RolesIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "rolesIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rolesIdsMin"))
			it.RolesIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "rolesIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rolesIdsMax"))
			it.RolesIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "profilesIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profilesIds"))
			it.ProfilesIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "profilesIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profilesIdsMin"))
			it.ProfilesIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "profilesIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profilesIdsMax"))
			it.ProfilesIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionsIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissionsIds"))
			it.PermissionsIds, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionsIdsMin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissionsIdsMin"))
			it.PermissionsIdsMin, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionsIdsMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissionsIdsMax"))
			it.PermissionsIdsMax, err = ec.unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "apikeys":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apikeys"))
			it.Apikeys, err = ec.unmarshalOUserAPIKeySortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeySortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			it.Roles, err = ec.unmarshalORoleSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "profiles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profiles"))
			it.Profiles, err = ec.unmarshalOProfileSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileSortType(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			it.Permissions, err = ec.unmarshalOPermissionSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createUser":
			out.Values[i] = ec._Mutation_createUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUser":
			out.Values[i] = ec._Mutation_updateUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUser":
			out.Values[i] = ec._Mutation_deleteUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllUsers":
			out.Values[i] = ec._Mutation_deleteAllUsers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUserAPIKey":
			out.Values[i] = ec._Mutation_createUserAPIKey(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserAPIKey":
			out.Values[i] = ec._Mutation_updateUserAPIKey(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUserAPIKey":
			out.Values[i] = ec._Mutation_deleteUserAPIKey(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllUserAPIKeys":
			out.Values[i] = ec._Mutation_deleteAllUserAPIKeys(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProfile":
			out.Values[i] = ec._Mutation_createProfile(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProfile":
			out.Values[i] = ec._Mutation_updateProfile(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProfile":
			out.Values[i] = ec._Mutation_deleteProfile(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllProfiles":
			out.Values[i] = ec._Mutation_deleteAllProfiles(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRole":
			out.Values[i] = ec._Mutation_createRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRole":
			out.Values[i] = ec._Mutation_updateRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRole":
			out.Values[i] = ec._Mutation_deleteRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllRoles":
			out.Values[i] = ec._Mutation_deleteAllRoles(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPermission":
			out.Values[i] = ec._Mutation_createPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePermission":
			out.Values[i] = ec._Mutation_updatePermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePermission":
			out.Values[i] = ec._Mutation_deletePermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAllPermissions":
			out.Values[i] = ec._Mutation_deleteAllPermissions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionImplementors = []string{"Permission"}

func (ec *executionContext) _Permission(ctx context.Context, sel ast.SelectionSet, obj *Permission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Permission")
		case "id":
			out.Values[i] = ec._Permission_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "domain":
			out.Values[i] = ec._Permission_domain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "tag":
			out.Values[i] = ec._Permission_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Permission_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Permission_users(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "roles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Permission_roles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "apikeys":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Permission_apikeys(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "updatedAt":
			out.Values[i] = ec._Permission_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Permission_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._Permission_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Permission_createdBy(ctx, field, obj)
		case "usersIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Permission_usersIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "usersConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Permission_usersConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "rolesIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Permission_rolesIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "rolesConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Permission_rolesConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "apikeysIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Permission_apikeysIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "apikeysConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Permission_apikeysConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionResultTypeImplementors = []string{"PermissionResultType"}

func (ec *executionContext) _PermissionResultType(ctx context.Context, sel ast.SelectionSet, obj *PermissionResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PermissionResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PermissionResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var profileImplementors = []string{"Profile"}

func (ec *executionContext) _Profile(ctx context.Context, sel ast.SelectionSet, obj *Profile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Profile")
		case "id":
			out.Values[i] = ec._Profile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":
			out.Values[i] = ec._Profile_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "externalUserId":
			out.Values[i] = ec._Profile_externalUserId(ctx, field, obj)
		case "provider":
			out.Values[i] = ec._Profile_provider(ctx, field, obj)
		case "avatarURL":
			out.Values[i] = ec._Profile_avatarURL(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Profile_name(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._Profile_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._Profile_lastName(ctx, field, obj)
		case "nickName":
			out.Values[i] = ec._Profile_nickName(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Profile_description(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Profile_location(ctx, field, obj)
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Profile_users(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "updatedAt":
			out.Values[i] = ec._Profile_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Profile_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._Profile_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Profile_createdBy(ctx, field, obj)
		case "usersIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Profile_usersIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "usersConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Profile_usersConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var profileResultTypeImplementors = []string{"ProfileResultType"}

func (ec *executionContext) _ProfileResultType(ctx context.Context, sel ast.SelectionSet, obj *ProfileResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProfileResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProfileResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "_service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				return res
			})
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userAPIKey":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userAPIKey(ctx, field)
				return res
			})
		case "userAPIKeys":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userAPIKeys(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "profile":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_profile(ctx, field)
				return res
			})
		case "profiles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_profiles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "role":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_role(ctx, field)
				return res
			})
		case "roles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_roles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "permission":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_permission(ctx, field)
				return res
			})
		case "permissions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_permissions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "id":
			out.Values[i] = ec._Role_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "domain":
			out.Values[i] = ec._Role_domain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Role_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Role_description(ctx, field, obj)
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_users(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "parents":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_parents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "children":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_children(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "permissions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_permissions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "updatedAt":
			out.Values[i] = ec._Role_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Role_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._Role_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Role_createdBy(ctx, field, obj)
		case "usersIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_usersIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "usersConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_usersConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "parentsIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_parentsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "parentsConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_parentsConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "childrenIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_childrenIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "childrenConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_childrenConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "permissionsIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_permissionsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "permissionsConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_permissionsConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleResultTypeImplementors = []string{"RoleResultType"}

func (ec *executionContext) _RoleResultType(ctx context.Context, sel ast.SelectionSet, obj *RoleResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RoleResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RoleResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "active":
			out.Values[i] = ec._User_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "password":
			out.Values[i] = ec._User_password(ctx, field, obj)
		case "avatarURL":
			out.Values[i] = ec._User_avatarURL(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._User_displayName(ctx, field, obj)
		case "description":
			out.Values[i] = ec._User_description(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
		case "nickName":
			out.Values[i] = ec._User_nickName(ctx, field, obj)
		case "location":
			out.Values[i] = ec._User_location(ctx, field, obj)
		case "apikeys":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_apikeys(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "roles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_roles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "profiles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_profiles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "permissions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_permissions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._User_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._User_createdBy(ctx, field, obj)
		case "apikeysIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_apikeysIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "apikeysConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_apikeysConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "rolesIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_rolesIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "rolesConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_rolesConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "profilesIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_profilesIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "profilesConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_profilesConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "permissionsIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_permissionsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "permissionsConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_permissionsConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userAPIKeyImplementors = []string{"UserAPIKey"}

func (ec *executionContext) _UserAPIKey(ctx context.Context, sel ast.SelectionSet, obj *UserAPIKey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAPIKeyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAPIKey")
		case "id":
			out.Values[i] = ec._UserAPIKey_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "key":
			out.Values[i] = ec._UserAPIKey_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._UserAPIKey_description(ctx, field, obj)
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserAPIKey_user(ctx, field, obj)
				return res
			})
		case "permissions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserAPIKey_permissions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userId":
			out.Values[i] = ec._UserAPIKey_userId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._UserAPIKey_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._UserAPIKey_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			out.Values[i] = ec._UserAPIKey_updatedBy(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._UserAPIKey_createdBy(ctx, field, obj)
		case "permissionsIds":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserAPIKey_permissionsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "permissionsConnection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserAPIKey_permissionsConnection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userAPIKeyResultTypeImplementors = []string{"UserAPIKeyResultType"}

func (ec *executionContext) _UserAPIKeyResultType(ctx context.Context, sel ast.SelectionSet, obj *UserAPIKeyResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAPIKeyResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAPIKeyResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserAPIKeyResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserAPIKeyResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userResultTypeImplementors = []string{"UserResultType"}

func (ec *executionContext) _UserResultType(ctx context.Context, sel ast.SelectionSet, obj *UserResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userResultTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserResultType")
		case "items":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserResultType_items(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "count":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserResultType_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNPermission2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermission(ctx context.Context, sel ast.SelectionSet, v Permission) graphql.Marshaler {
	return ec._Permission(ctx, sel, &v)
}

func (ec *executionContext) marshalNPermission2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionᚄ(ctx context.Context, sel ast.SelectionSet, v []*Permission) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermission2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPermission2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermission(ctx context.Context, sel ast.SelectionSet, v *Permission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Permission(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPermissionCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx context.Context, v interface{}) (*PermissionFilterType, error) {
	res, err := ec.unmarshalInputPermissionFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPermissionResultType2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionResultType(ctx context.Context, sel ast.SelectionSet, v PermissionResultType) graphql.Marshaler {
	return ec._PermissionResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNPermissionResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionResultType(ctx context.Context, sel ast.SelectionSet, v *PermissionResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PermissionResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPermissionSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortType(ctx context.Context, v interface{}) (*PermissionSortType, error) {
	res, err := ec.unmarshalInputPermissionSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPermissionUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNProfile2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfile(ctx context.Context, sel ast.SelectionSet, v Profile) graphql.Marshaler {
	return ec._Profile(ctx, sel, &v)
}

func (ec *executionContext) marshalNProfile2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileᚄ(ctx context.Context, sel ast.SelectionSet, v []*Profile) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProfile2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProfile2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfile(ctx context.Context, sel ast.SelectionSet, v *Profile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Profile(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProfileCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNProfileFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterType(ctx context.Context, v interface{}) (*ProfileFilterType, error) {
	res, err := ec.unmarshalInputProfileFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProfileResultType2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileResultType(ctx context.Context, sel ast.SelectionSet, v ProfileResultType) graphql.Marshaler {
	return ec._ProfileResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNProfileResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileResultType(ctx context.Context, sel ast.SelectionSet, v *ProfileResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProfileResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProfileSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileSortType(ctx context.Context, v interface{}) (*ProfileSortType, error) {
	res, err := ec.unmarshalInputProfileSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProfileUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRole(ctx context.Context, sel ast.SelectionSet, v Role) graphql.Marshaler {
	return ec._Role(ctx, sel, &v)
}

func (ec *executionContext) marshalNRole2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRole2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRole(ctx context.Context, sel ast.SelectionSet, v *Role) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNRoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx context.Context, v interface{}) (*RoleFilterType, error) {
	res, err := ec.unmarshalInputRoleFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRoleResultType2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleResultType(ctx context.Context, sel ast.SelectionSet, v RoleResultType) graphql.Marshaler {
	return ec._RoleResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNRoleResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleResultType(ctx context.Context, sel ast.SelectionSet, v *RoleResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RoleResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortType(ctx context.Context, v interface{}) (*RoleSortType, error) {
	res, err := ec.unmarshalInputRoleSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUser(ctx context.Context, sel ast.SelectionSet, v User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUser(ctx context.Context, sel ast.SelectionSet, v *User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserAPIKey2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKey(ctx context.Context, sel ast.SelectionSet, v UserAPIKey) graphql.Marshaler {
	return ec._UserAPIKey(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserAPIKey2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyᚄ(ctx context.Context, sel ast.SelectionSet, v []*UserAPIKey) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserAPIKey2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKey(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUserAPIKey2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKey(ctx context.Context, sel ast.SelectionSet, v *UserAPIKey) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserAPIKey(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserAPIKeyCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNUserAPIKeyFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterType(ctx context.Context, v interface{}) (*UserAPIKeyFilterType, error) {
	res, err := ec.unmarshalInputUserAPIKeyFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserAPIKeyResultType2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyResultType(ctx context.Context, sel ast.SelectionSet, v UserAPIKeyResultType) graphql.Marshaler {
	return ec._UserAPIKeyResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserAPIKeyResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyResultType(ctx context.Context, sel ast.SelectionSet, v *UserAPIKeyResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserAPIKeyResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserAPIKeySortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeySortType(ctx context.Context, v interface{}) (*UserAPIKeySortType, error) {
	res, err := ec.unmarshalInputUserAPIKeySortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserAPIKeyUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNUserCreateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx context.Context, v interface{}) (*UserFilterType, error) {
	res, err := ec.unmarshalInputUserFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserResultType2githubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserResultType(ctx context.Context, sel ast.SelectionSet, v UserResultType) graphql.Marshaler {
	return ec._UserResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserResultType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserResultType(ctx context.Context, sel ast.SelectionSet, v *UserResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortType(ctx context.Context, v interface{}) (*UserSortType, error) {
	res, err := ec.unmarshalInputUserSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserUpdateInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx context.Context, v interface{}) (*ObjectSortType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ObjectSortType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOObjectSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐObjectSortType(ctx context.Context, sel ast.SelectionSet, v *ObjectSortType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPermission2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermission(ctx context.Context, sel ast.SelectionSet, v *Permission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Permission(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPermissionFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterTypeᚄ(ctx context.Context, v interface{}) ([]*PermissionFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PermissionFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPermissionFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionFilterType(ctx context.Context, v interface{}) (*PermissionFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPermissionFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPermissionSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortTypeᚄ(ctx context.Context, v interface{}) ([]*PermissionSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PermissionSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPermissionSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPermissionSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐPermissionSortType(ctx context.Context, v interface{}) (*PermissionSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPermissionSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProfile2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfile(ctx context.Context, sel ast.SelectionSet, v *Profile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Profile(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProfileFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterTypeᚄ(ctx context.Context, v interface{}) ([]*ProfileFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ProfileFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProfileFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProfileFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileFilterType(ctx context.Context, v interface{}) (*ProfileFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProfileFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProfileSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileSortTypeᚄ(ctx context.Context, v interface{}) ([]*ProfileSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ProfileSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProfileSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProfileSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐProfileSortType(ctx context.Context, v interface{}) (*ProfileSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProfileSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORole2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRole(ctx context.Context, sel ast.SelectionSet, v *Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalORoleFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterTypeᚄ(ctx context.Context, v interface{}) ([]*RoleFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RoleFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORoleFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleFilterType(ctx context.Context, v interface{}) (*RoleFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORoleSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortTypeᚄ(ctx context.Context, v interface{}) ([]*RoleSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RoleSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRoleSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORoleSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐRoleSortType(ctx context.Context, v interface{}) (*RoleSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUser(ctx context.Context, sel ast.SelectionSet, v *User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserAPIKey2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKey(ctx context.Context, sel ast.SelectionSet, v *UserAPIKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserAPIKey(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserAPIKeyFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterTypeᚄ(ctx context.Context, v interface{}) ([]*UserAPIKeyFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*UserAPIKeyFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserAPIKeyFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserAPIKeyFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeyFilterType(ctx context.Context, v interface{}) (*UserAPIKeyFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserAPIKeyFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserAPIKeySortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeySortTypeᚄ(ctx context.Context, v interface{}) ([]*UserAPIKeySortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*UserAPIKeySortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserAPIKeySortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeySortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserAPIKeySortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserAPIKeySortType(ctx context.Context, v interface{}) (*UserAPIKeySortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserAPIKeySortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserFilterType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterTypeᚄ(ctx context.Context, v interface{}) ([]*UserFilterType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*UserFilterType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserFilterType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserFilterType(ctx context.Context, v interface{}) (*UserFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserSortType2ᚕᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortTypeᚄ(ctx context.Context, v interface{}) ([]*UserSortType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*UserSortType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserSortType2ᚖgithubᚗcomᚋloopcontextᚋauthᚑapiᚑgoᚋgenᚐUserSortType(ctx context.Context, v interface{}) (*UserSortType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserSortType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
