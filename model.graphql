extend type Query {
  login: String!
}

type User @entity {
  active: Boolean! @column(default: false)
  email: String! @column(unique: true)
  password: String @column
  avatarURL: String @column
  displayName: String @column
  description: String @column
  firstName: String @column
  lastName: String @column
  nickName: String @column
  location: String @column
  apikeys: [UserAPIKey!]! @relationship(inverse: "user", preload: true)
  roles: [Role!]! @relationship(inverse: "users", preload: true)
  profiles: [Profile!]! @relationship(inverse: "users", preload: true)
  permissions: [Permission!]! @relationship(inverse: "users", preload: true)
}

type UserAPIKey @entity {
  key: String! @column(unique: true)
  description: String @column
  user: User @relationship(inverse: "apikeys", preload: true)
  permissions: [Permission!]! @relationship(inverse: "apikeys", preload: true)
}

type Profile @entity {
  email: String! @column
  externalUserId: String @column
  provider: String @column
  avatarURL: String @column
  name: String @column
  firstName: String @column
  lastName: String @column
  nickName: String @column
  description: String @column
  location: String @column
  users: [User!]! @relationship(inverse: "profiles")
}

type Role @entity {
  domain: String! @column # Application domain, name or namespace
  name: String! @column
  description: String @column
  users: [User!]! @relationship(inverse: "roles")
  parents: [Role!]! @relationship(inverse: "children")
  children: [Role!]! @relationship(inverse: "parents")
  permissions: [Permission!]! @relationship(inverse: "roles")
}

type Permission @entity {
  domain: String! @column # Application domain, name or namespace
  tag: String! @column(unique: true)
  description: String! @column
  users: [User!]! @relationship(inverse: "permissions")
  roles: [Role!]! @relationship(inverse: "permissions")
  apikeys: [UserAPIKey!]! @relationship(inverse: "permissions")
}
